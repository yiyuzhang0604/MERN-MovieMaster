{"ast":null,"code":"import { __assign } from 'tslib';\nimport { print } from 'graphql/language/printer';\nimport { InvariantError } from 'ts-invariant';\nvar defaultHttpOptions = {\n  includeQuery: true,\n  includeExtensions: false\n};\nvar defaultHeaders = {\n  accept: '*/*',\n  'content-type': 'application/json'\n};\nvar defaultOptions = {\n  method: 'POST'\n};\nvar fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions\n};\n\nvar throwServerError = function (response, result, message) {\n  var error = new Error(message);\n  error.name = 'ServerError';\n  error.response = response;\n  error.statusCode = response.status;\n  error.result = result;\n  throw error;\n};\n\nvar parseAndCheckHttpResponse = function (operations) {\n  return function (response) {\n    return response.text().then(function (bodyText) {\n      try {\n        return JSON.parse(bodyText);\n      } catch (err) {\n        var parseError = err;\n        parseError.name = 'ServerParseError';\n        parseError.response = response;\n        parseError.statusCode = response.status;\n        parseError.bodyText = bodyText;\n        return Promise.reject(parseError);\n      }\n    }).then(function (result) {\n      if (response.status >= 300) {\n        throwServerError(response, result, \"Response not successful: Received status code \" + response.status);\n      }\n\n      if (!Array.isArray(result) && !result.hasOwnProperty('data') && !result.hasOwnProperty('errors')) {\n        throwServerError(response, result, \"Server response was missing for query '\" + (Array.isArray(operations) ? operations.map(function (op) {\n          return op.operationName;\n        }) : operations.operationName) + \"'.\");\n      }\n\n      return result;\n    });\n  };\n};\n\nvar checkFetcher = function (fetcher) {\n  if (!fetcher && typeof fetch === 'undefined') {\n    var library = 'unfetch';\n    if (typeof window === 'undefined') library = 'node-fetch';\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError(\"\\nfetch is not found globally and no fetcher passed, to fix pass a fetch for\\nyour environment like https://www.npmjs.com/package/\" + library + \".\\n\\nFor example:\\nimport fetch from '\" + library + \"';\\nimport { createHttpLink } from 'apollo-link-http';\\n\\nconst link = createHttpLink({ uri: '/graphql', fetch: fetch });\");\n  }\n};\n\nvar createSignalIfSupported = function () {\n  if (typeof AbortController === 'undefined') return {\n    controller: false,\n    signal: false\n  };\n  var controller = new AbortController();\n  var signal = controller.signal;\n  return {\n    controller: controller,\n    signal: signal\n  };\n};\n\nvar selectHttpOptionsAndBody = function (operation, fallbackConfig) {\n  var configs = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    configs[_i - 2] = arguments[_i];\n  }\n\n  var options = __assign({}, fallbackConfig.options, {\n    headers: fallbackConfig.headers,\n    credentials: fallbackConfig.credentials\n  });\n\n  var http = fallbackConfig.http;\n  configs.forEach(function (config) {\n    options = __assign({}, options, config.options, {\n      headers: __assign({}, options.headers, config.headers)\n    });\n    if (config.credentials) options.credentials = config.credentials;\n    http = __assign({}, http, config.http);\n  });\n  var operationName = operation.operationName,\n      extensions = operation.extensions,\n      variables = operation.variables,\n      query = operation.query;\n  var body = {\n    operationName: operationName,\n    variables: variables\n  };\n  if (http.includeExtensions) body.extensions = extensions;\n  if (http.includeQuery) body.query = print(query);\n  return {\n    options: options,\n    body: body\n  };\n};\n\nvar serializeFetchParameter = function (p, label) {\n  var serialized;\n\n  try {\n    serialized = JSON.stringify(p);\n  } catch (e) {\n    var parseError = process.env.NODE_ENV === \"production\" ? new InvariantError(2) : new InvariantError(\"Network request failed. \" + label + \" is not serializable: \" + e.message);\n    parseError.parseError = e;\n    throw parseError;\n  }\n\n  return serialized;\n};\n\nvar selectURI = function (operation, fallbackURI) {\n  var context = operation.getContext();\n  var contextURI = context.uri;\n\n  if (contextURI) {\n    return contextURI;\n  } else if (typeof fallbackURI === 'function') {\n    return fallbackURI(operation);\n  } else {\n    return fallbackURI || '/graphql';\n  }\n};\n\nexport { checkFetcher, createSignalIfSupported, fallbackHttpConfig, parseAndCheckHttpResponse, selectHttpOptionsAndBody, selectURI, serializeFetchParameter, throwServerError };","map":{"version":3,"mappings":"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","names":["defaultHttpOptions","includeQuery","includeExtensions","defaultHeaders","accept","defaultOptions","method","fallbackHttpConfig","http","headers","options","throwServerError","response","result","message","error","Error","name","statusCode","status","parseAndCheckHttpResponse","text","then","JSON","parse","bodyText","err","parseError","Promise","reject","Array","isArray","hasOwnProperty","operations","map","operationName","checkFetcher","fetcher","fetch","library","window","process","createSignalIfSupported","AbortController","controller","signal","selectHttpOptionsAndBody","operation","fallbackConfig","configs","credentials","forEach","config","extensions","variables","query","body","print","serializeFetchParameter","p","label","serialized","stringify","e","selectURI","fallbackURI","context","getContext","contextURI","uri"],"sources":["../src/index.ts"],"sourcesContent":["import { Operation } from 'apollo-link';\nimport { print } from 'graphql/language/printer';\nimport { InvariantError } from 'ts-invariant';\n\n/*\n * Http Utilities: shared across links that make http requests\n */\n\n// XXX replace with actual typings when available\ndeclare var AbortController: any;\n\n//Used for any Error for data from the server\n//on a request with a Status >= 300\n//response contains no data or errors\nexport type ServerError = Error & {\n  response: Response;\n  result: Record<string, any>;\n  statusCode: number;\n};\n\n//Thrown when server's resonse is cannot be parsed\nexport type ServerParseError = Error & {\n  response: Response;\n  statusCode: number;\n  bodyText: string;\n};\n\nexport type ClientParseError = InvariantError & {\n  parseError: Error;\n};\n\nexport interface HttpQueryOptions {\n  includeQuery?: boolean;\n  includeExtensions?: boolean;\n}\n\nexport interface HttpConfig {\n  http?: HttpQueryOptions;\n  options?: any;\n  headers?: any; //overrides headers in options\n  credentials?: any;\n}\n\nexport interface UriFunction {\n  (operation: Operation): string;\n}\n\n// The body of a GraphQL-over-HTTP-POST request.\nexport interface Body {\n  query?: string;\n  operationName?: string;\n  variables?: Record<string, any>;\n  extensions?: Record<string, any>;\n}\n\nexport interface HttpOptions {\n  /**\n   * The URI to use when fetching operations.\n   *\n   * Defaults to '/graphql'.\n   */\n  uri?: string | UriFunction;\n\n  /**\n   * Passes the extensions field to your graphql server.\n   *\n   * Defaults to false.\n   */\n  includeExtensions?: boolean;\n\n  /**\n   * A `fetch`-compatible API to use when making requests.\n   */\n  fetch?: WindowOrWorkerGlobalScope['fetch'];\n\n  /**\n   * An object representing values to be sent as headers on the request.\n   */\n  headers?: any;\n\n  /**\n   * The credentials policy you want to use for the fetch call.\n   */\n  credentials?: string;\n\n  /**\n   * Any overrides of the fetch options argument to pass to the fetch call.\n   */\n  fetchOptions?: any;\n}\n\nconst defaultHttpOptions: HttpQueryOptions = {\n  includeQuery: true,\n  includeExtensions: false,\n};\n\nconst defaultHeaders = {\n  // headers are case insensitive (https://stackoverflow.com/a/5259004)\n  accept: '*/*',\n  'content-type': 'application/json',\n};\n\nconst defaultOptions = {\n  method: 'POST',\n};\n\nexport const fallbackHttpConfig = {\n  http: defaultHttpOptions,\n  headers: defaultHeaders,\n  options: defaultOptions,\n};\n\nexport const throwServerError = (response, result, message) => {\n  const error = new Error(message) as ServerError;\n\n  error.name = 'ServerError';\n  error.response = response;\n  error.statusCode = response.status;\n  error.result = result;\n\n  throw error;\n};\n\n//TODO: when conditional types come in ts 2.8, operations should be a generic type that extends Operation | Array<Operation>\nexport const parseAndCheckHttpResponse = operations => (response: Response) => {\n  return (\n    response\n      .text()\n      .then(bodyText => {\n        try {\n          return JSON.parse(bodyText);\n        } catch (err) {\n          const parseError = err as ServerParseError;\n          parseError.name = 'ServerParseError';\n          parseError.response = response;\n          parseError.statusCode = response.status;\n          parseError.bodyText = bodyText;\n          return Promise.reject(parseError);\n        }\n      })\n      //TODO: when conditional types come out then result should be T extends Array ? Array<FetchResult> : FetchResult\n      .then((result: any) => {\n        if (response.status >= 300) {\n          //Network error\n          throwServerError(\n            response,\n            result,\n            `Response not successful: Received status code ${response.status}`,\n          );\n        }\n        //TODO should really error per response in a Batch based on properties\n        //    - could be done in a validation link\n        if (\n          !Array.isArray(result) &&\n          !result.hasOwnProperty('data') &&\n          !result.hasOwnProperty('errors')\n        ) {\n          //Data error\n          throwServerError(\n            response,\n            result,\n            `Server response was missing for query '${\n              Array.isArray(operations)\n                ? operations.map(op => op.operationName)\n                : operations.operationName\n            }'.`,\n          );\n        }\n        return result;\n      })\n  );\n};\n\nexport const checkFetcher = (fetcher: WindowOrWorkerGlobalScope['fetch']) => {\n  if (!fetcher && typeof fetch === 'undefined') {\n    let library: string = 'unfetch';\n    if (typeof window === 'undefined') library = 'node-fetch';\n    throw new InvariantError(`\nfetch is not found globally and no fetcher passed, to fix pass a fetch for\nyour environment like https://www.npmjs.com/package/${library}.\n\nFor example:\nimport fetch from '${library}';\nimport { createHttpLink } from 'apollo-link-http';\n\nconst link = createHttpLink({ uri: '/graphql', fetch: fetch });`);\n  }\n};\n\nexport const createSignalIfSupported = () => {\n  if (typeof AbortController === 'undefined')\n    return { controller: false, signal: false };\n\n  const controller = new AbortController();\n  const signal = controller.signal;\n  return { controller, signal };\n};\n\nexport const selectHttpOptionsAndBody = (\n  operation: Operation,\n  fallbackConfig: HttpConfig,\n  ...configs: Array<HttpConfig>\n) => {\n  let options: HttpConfig & Record<string, any> = {\n    ...fallbackConfig.options,\n    headers: fallbackConfig.headers,\n    credentials: fallbackConfig.credentials,\n  };\n  let http: HttpQueryOptions = fallbackConfig.http;\n\n  /*\n   * use the rest of the configs to populate the options\n   * configs later in the list will overwrite earlier fields\n   */\n  configs.forEach(config => {\n    options = {\n      ...options,\n      ...config.options,\n      headers: {\n        ...options.headers,\n        ...config.headers,\n      },\n    };\n    if (config.credentials) options.credentials = config.credentials;\n\n    http = {\n      ...http,\n      ...config.http,\n    };\n  });\n\n  //The body depends on the http options\n  const { operationName, extensions, variables, query } = operation;\n  const body: Body = { operationName, variables };\n\n  if (http.includeExtensions) (body as any).extensions = extensions;\n\n  // not sending the query (i.e persisted queries)\n  if (http.includeQuery) (body as any).query = print(query);\n\n  return {\n    options,\n    body,\n  };\n};\n\nexport const serializeFetchParameter = (p, label) => {\n  let serialized;\n  try {\n    serialized = JSON.stringify(p);\n  } catch (e) {\n    const parseError = new InvariantError(\n      `Network request failed. ${label} is not serializable: ${e.message}`,\n    ) as ClientParseError;\n    parseError.parseError = e;\n    throw parseError;\n  }\n  return serialized;\n};\n\n//selects \"/graphql\" by default\nexport const selectURI = (\n  operation,\n  fallbackURI?: string | ((operation: Operation) => string),\n) => {\n  const context = operation.getContext();\n  const contextURI = context.uri;\n\n  if (contextURI) {\n    return contextURI;\n  } else if (typeof fallbackURI === 'function') {\n    return fallbackURI(operation);\n  } else {\n    return (fallbackURI as string) || '/graphql';\n  }\n};\n"]},"metadata":{},"sourceType":"module"}