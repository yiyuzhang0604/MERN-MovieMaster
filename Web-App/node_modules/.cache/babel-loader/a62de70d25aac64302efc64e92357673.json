{"ast":null,"code":"import { Slot } from '@wry/context';\nexport { asyncFromGen, bind as bindContext, noContext, setTimeout } from '@wry/context';\n\nfunction defaultDispose() {}\n\nvar Cache =\n/** @class */\nfunction () {\n  function Cache(max, dispose) {\n    if (max === void 0) {\n      max = Infinity;\n    }\n\n    if (dispose === void 0) {\n      dispose = defaultDispose;\n    }\n\n    this.max = max;\n    this.dispose = dispose;\n    this.map = new Map();\n    this.newest = null;\n    this.oldest = null;\n  }\n\n  Cache.prototype.has = function (key) {\n    return this.map.has(key);\n  };\n\n  Cache.prototype.get = function (key) {\n    var entry = this.getEntry(key);\n    return entry && entry.value;\n  };\n\n  Cache.prototype.getEntry = function (key) {\n    var entry = this.map.get(key);\n\n    if (entry && entry !== this.newest) {\n      var older = entry.older,\n          newer = entry.newer;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      entry.older = this.newest;\n      entry.older.newer = entry;\n      entry.newer = null;\n      this.newest = entry;\n\n      if (entry === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return entry;\n  };\n\n  Cache.prototype.set = function (key, value) {\n    var entry = this.getEntry(key);\n\n    if (entry) {\n      return entry.value = value;\n    }\n\n    entry = {\n      key: key,\n      value: value,\n      newer: null,\n      older: this.newest\n    };\n\n    if (this.newest) {\n      this.newest.newer = entry;\n    }\n\n    this.newest = entry;\n    this.oldest = this.oldest || entry;\n    this.map.set(key, entry);\n    return entry.value;\n  };\n\n  Cache.prototype.clean = function () {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  };\n\n  Cache.prototype.delete = function (key) {\n    var entry = this.map.get(key);\n\n    if (entry) {\n      if (entry === this.newest) {\n        this.newest = entry.older;\n      }\n\n      if (entry === this.oldest) {\n        this.oldest = entry.newer;\n      }\n\n      if (entry.newer) {\n        entry.newer.older = entry.older;\n      }\n\n      if (entry.older) {\n        entry.older.newer = entry.newer;\n      }\n\n      this.map.delete(key);\n      this.dispose(entry.value, key);\n      return true;\n    }\n\n    return false;\n  };\n\n  return Cache;\n}();\n\nvar parentEntrySlot = new Slot();\nvar reusableEmptyArray = [];\nvar emptySetPool = [];\nvar POOL_TARGET_SIZE = 100; // Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\n\nfunction assert(condition, optionalMessage) {\n  if (!condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\n\nfunction valueIs(a, b) {\n  var len = a.length;\n  return (// Unknown values are not equal to each other.\n    len > 0 && // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length && // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\n\nfunction valueGet(value) {\n  switch (value.length) {\n    case 0:\n      throw new Error(\"unknown value\");\n\n    case 1:\n      return value[0];\n\n    case 2:\n      throw value[1];\n  }\n}\n\nfunction valueCopy(value) {\n  return value.slice(0);\n}\n\nvar Entry =\n/** @class */\nfunction () {\n  function Entry(fn, args) {\n    this.fn = fn;\n    this.args = args;\n    this.parents = new Set();\n    this.childValues = new Map(); // When this Entry has children that are dirty, this property becomes\n    // a Set containing other Entry objects, borrowed from emptySetPool.\n    // When the set becomes empty, it gets recycled back to emptySetPool.\n\n    this.dirtyChildren = null;\n    this.dirty = true;\n    this.recomputing = false;\n    this.value = [];\n    ++Entry.count;\n  } // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n\n\n  Entry.prototype.recompute = function () {\n    assert(!this.recomputing, \"already recomputing\");\n\n    if (!rememberParent(this) && maybeReportOrphan(this)) {\n      // The recipient of the entry.reportOrphan callback decided to dispose\n      // of this orphan entry by calling entry.dispose(), so we don't need to\n      // (and should not) proceed with the recomputation.\n      return void 0;\n    }\n\n    return mightBeDirty(this) ? reallyRecompute(this) : valueGet(this.value);\n  };\n\n  Entry.prototype.setDirty = function () {\n    if (this.dirty) return;\n    this.dirty = true;\n    this.value.length = 0;\n    reportDirty(this); // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n\n    maybeUnsubscribe(this);\n  };\n\n  Entry.prototype.dispose = function () {\n    var _this = this;\n\n    forgetChildren(this).forEach(maybeReportOrphan);\n    maybeUnsubscribe(this); // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n\n    this.parents.forEach(function (parent) {\n      parent.setDirty();\n      forgetChild(parent, _this);\n    });\n  };\n\n  Entry.count = 0;\n  return Entry;\n}();\n\nfunction rememberParent(child) {\n  var parent = parentEntrySlot.getValue();\n\n  if (parent) {\n    child.parents.add(parent);\n\n    if (!parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n\n    return parent;\n  }\n}\n\nfunction reallyRecompute(entry) {\n  // Since this recomputation is likely to re-remember some of this\n  // entry's children, we forget our children here but do not call\n  // maybeReportOrphan until after the recomputation finishes.\n  var originalChildren = forgetChildren(entry); // Set entry as the parent entry while calling recomputeNewValue(entry).\n\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry]);\n\n  if (maybeSubscribe(entry)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  } // Now that we've had a chance to re-remember any children that were\n  // involved in the recomputation, we can safely report any orphan\n  // children that remain.\n\n\n  originalChildren.forEach(maybeReportOrphan);\n  return valueGet(entry.value);\n}\n\nfunction recomputeNewValue(entry) {\n  entry.recomputing = true; // Set entry.value as unknown.\n\n  entry.value.length = 0;\n\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, entry.args);\n  } catch (e) {\n    // If entry.fn throws, entry.value will become exceptional.\n    entry.value[1] = e;\n  } // Either way, this line is always reached.\n\n\n  entry.recomputing = false;\n}\n\nfunction mightBeDirty(entry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\n\nfunction setClean(entry) {\n  entry.dirty = false;\n\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n\n  reportClean(entry);\n}\n\nfunction reportDirty(child) {\n  child.parents.forEach(function (parent) {\n    return reportDirtyChild(parent, child);\n  });\n}\n\nfunction reportClean(child) {\n  child.parents.forEach(function (parent) {\n    return reportCleanChild(parent, child);\n  });\n} // Let a parent Entry know that one of its children may be dirty.\n\n\nfunction reportDirtyChild(parent, child) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n\n  if (!parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set();\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n\n  parent.dirtyChildren.add(child);\n  reportDirty(parent);\n} // Let a parent Entry know that one of its children is no longer dirty.\n\n\nfunction reportCleanChild(parent, child) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(!mightBeDirty(child));\n  var childValue = parent.childValues.get(child);\n\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (!valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n\n  removeDirtyChild(parent, child);\n\n  if (mightBeDirty(parent)) {\n    return;\n  }\n\n  reportClean(parent);\n}\n\nfunction removeDirtyChild(parent, child) {\n  var dc = parent.dirtyChildren;\n\n  if (dc) {\n    dc.delete(child);\n\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n\n      parent.dirtyChildren = null;\n    }\n  }\n} // If the given entry has a reportOrphan method, and no remaining parents,\n// call entry.reportOrphan and return true iff it returns true. The\n// reportOrphan function should return true to indicate entry.dispose()\n// has been called, and the entry has been removed from any other caches\n// (see index.js for the only current example).\n\n\nfunction maybeReportOrphan(entry) {\n  return entry.parents.size === 0 && typeof entry.reportOrphan === \"function\" && entry.reportOrphan() === true;\n} // Removes all children from this entry and returns an array of the\n// removed children.\n\n\nfunction forgetChildren(parent) {\n  var children = reusableEmptyArray;\n\n  if (parent.childValues.size > 0) {\n    children = [];\n    parent.childValues.forEach(function (_value, child) {\n      forgetChild(parent, child);\n      children.push(child);\n    });\n  } // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n\n\n  assert(parent.dirtyChildren === null);\n  return children;\n}\n\nfunction forgetChild(parent, child) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\n\nfunction maybeSubscribe(entry) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n\n      entry.unsubscribe = entry.subscribe.apply(null, entry.args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  } // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n\n\n  return true;\n}\n\nfunction maybeUnsubscribe(entry) {\n  var unsubscribe = entry.unsubscribe;\n\n  if (typeof unsubscribe === \"function\") {\n    entry.unsubscribe = void 0;\n    unsubscribe();\n  }\n} // A trie data structure that holds object keys weakly, yet can also hold\n// non-object keys, unlike the native `WeakMap`.\n\n\nvar KeyTrie =\n/** @class */\nfunction () {\n  function KeyTrie(weakness) {\n    this.weakness = weakness;\n  }\n\n  KeyTrie.prototype.lookup = function () {\n    var array = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      array[_i] = arguments[_i];\n    }\n\n    return this.lookupArray(array);\n  };\n\n  KeyTrie.prototype.lookupArray = function (array) {\n    var node = this;\n    array.forEach(function (key) {\n      return node = node.getChildTrie(key);\n    });\n    return node.data || (node.data = Object.create(null));\n  };\n\n  KeyTrie.prototype.getChildTrie = function (key) {\n    var map = this.weakness && isObjRef(key) ? this.weak || (this.weak = new WeakMap()) : this.strong || (this.strong = new Map());\n    var child = map.get(key);\n    if (!child) map.set(key, child = new KeyTrie(this.weakness));\n    return child;\n  };\n\n  return KeyTrie;\n}();\n\nfunction isObjRef(value) {\n  switch (typeof value) {\n    case \"object\":\n      if (value === null) break;\n    // Fall through to return true...\n\n    case \"function\":\n      return true;\n  }\n\n  return false;\n} // The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\n\n\nvar keyTrie = new KeyTrie(typeof WeakMap === \"function\");\n\nfunction defaultMakeCacheKey() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return keyTrie.lookupArray(args);\n}\n\nvar caches = new Set();\n\nfunction wrap(originalFunction, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n\n  var cache = new Cache(options.max || Math.pow(2, 16), function (entry) {\n    return entry.dispose();\n  });\n  var disposable = !!options.disposable;\n  var makeCacheKey = options.makeCacheKey || defaultMakeCacheKey;\n\n  function optimistic() {\n    if (disposable && !parentEntrySlot.hasValue()) {\n      // If there's no current parent computation, and this wrapped\n      // function is disposable (meaning we don't care about entry.value,\n      // just dependency tracking), then we can short-cut everything else\n      // in this function, because entry.recompute() is going to recycle\n      // the entry object without recomputing anything, anyway.\n      return void 0;\n    }\n\n    var key = makeCacheKey.apply(null, arguments);\n\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments);\n    }\n\n    var args = Array.prototype.slice.call(arguments);\n    var entry = cache.get(key);\n\n    if (entry) {\n      entry.args = args;\n    } else {\n      entry = new Entry(originalFunction, args);\n      cache.set(key, entry);\n      entry.subscribe = options.subscribe;\n\n      if (disposable) {\n        entry.reportOrphan = function () {\n          return cache.delete(key);\n        };\n      }\n    }\n\n    var value = entry.recompute(); // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n\n    cache.set(key, entry);\n    caches.add(cache); // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n\n    if (!parentEntrySlot.hasValue()) {\n      caches.forEach(function (cache) {\n        return cache.clean();\n      });\n      caches.clear();\n    } // If options.disposable is truthy, the caller of wrap is telling us\n    // they don't care about the result of entry.recompute(), so we should\n    // avoid returning the value, so it won't be accidentally used.\n\n\n    return disposable ? void 0 : value;\n  }\n\n  optimistic.dirty = function () {\n    var key = makeCacheKey.apply(null, arguments);\n    var child = key !== void 0 && cache.get(key);\n\n    if (child) {\n      child.setDirty();\n    }\n  };\n\n  return optimistic;\n}\n\nexport { KeyTrie, defaultMakeCacheKey, wrap };","map":{"version":3,"mappings":"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","names":["defaultDispose","max","dispose","Map","Cache","key","map","has","entry","getEntry","value","get","newest","newer","older","oldest","set","size","delete","parentEntrySlot","Slot","reusableEmptyArray","emptySetPool","POOL_TARGET_SIZE","assert","condition","optionalMessage","Error","valueIs","a","b","len","length","valueGet","valueCopy","slice","fn","args","Set","Entry","count","recomputing","rememberParent","maybeReportOrphan","mightBeDirty","reallyRecompute","dirty","reportDirty","maybeUnsubscribe","forgetChildren","forEach","parents","parent","setDirty","forgetChild","_this","child","getValue","add","childValues","reportDirtyChild","reportCleanChild","originalChildren","withValue","recomputeNewValue","maybeSubscribe","setClean","apply","e","dirtyChildren","reportClean","pop","childValue","removeDirtyChild","dc","push","reportOrphan","children","_value","subscribe","unsubscribe","weakness","KeyTrie","array","lookupArray","node","getChildTrie","data","Object","create","isObjRef","weak","WeakMap","strong","keyTrie","defaultMakeCacheKey","caches","wrap","originalFunction","options","cache","Math","pow","disposable","makeCacheKey","optimistic","hasValue","arguments","Array","prototype","call","recompute","clean","clear"],"sources":["../src/cache.ts","../src/context.ts","../src/entry.ts","../src/key-trie.ts","../src/index.ts"],"sourcesContent":["interface Node<K, V> {\n  key: K;\n  value: V;\n  newer: Node<K, V> | null;\n  older: Node<K, V> | null;\n}\n\nfunction defaultDispose() {}\n\nexport class Cache<K = any, V = any> {\n  private map = new Map<K, Node<K, V>>();\n  private newest: Node<K, V> | null = null;\n  private oldest: Node<K, V> | null = null;\n\n  constructor(\n    private max = Infinity,\n    public dispose: (value: V, key: K) => void = defaultDispose,\n  ) {}\n\n  public has(key: K) {\n    return this.map.has(key);\n  }\n\n  public get(key: K) {\n    const entry = this.getEntry(key);\n    return entry && entry.value;\n  }\n\n  private getEntry(key: K): Node<K, V> | void {\n    const entry = this.map.get(key);\n\n    if (entry && entry !== this.newest) {\n      const { older, newer } = entry;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      entry.older = this.newest;\n      entry.older!.newer = entry;\n\n      entry.newer = null;\n      this.newest = entry;\n\n      if (entry === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return entry;\n  }\n\n  public set(key: K, value: V) {\n    let entry = this.getEntry(key);\n    if (entry) {\n      return entry.value = value;\n    }\n\n    entry = {\n      key: key,\n      value: value,\n      newer: null,\n      older: this.newest\n    };\n\n    if (this.newest) {\n      this.newest.newer = entry;\n    }\n\n    this.newest = entry;\n    this.oldest = this.oldest || entry;\n\n    this.map.set(key, entry);\n\n    return entry.value;\n  }\n\n  public clean() {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  }\n\n  public delete(key: K) {\n    const entry = this.map.get(key);\n    if (entry) {\n      if (entry === this.newest) {\n        this.newest = entry.older;\n      }\n\n      if (entry === this.oldest) {\n        this.oldest = entry.newer;\n      }\n\n      if (entry.newer) {\n        entry.newer.older = entry.older;\n      }\n\n      if (entry.older) {\n        entry.older.newer = entry.newer;\n      }\n\n      this.map.delete(key);\n      this.dispose(entry.value, key);\n\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { AnyEntry } from \"./entry\";\nimport { Slot } from \"@wry/context\";\n\nexport const parentEntrySlot = new Slot<AnyEntry>();\n\nexport {\n  bind as bindContext,\n  noContext,\n  setTimeout,\n  asyncFromGen,\n} from \"@wry/context\";\n","import { parentEntrySlot } from \"./context\";\nimport { OptimisticWrapOptions } from \"./index\";\n\nconst reusableEmptyArray: AnyEntry[] = [];\nconst emptySetPool: Set<AnyEntry>[] = [];\nconst POOL_TARGET_SIZE = 100;\n\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition: any, optionalMessage?: string) {\n  if (! condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\n\n// Since exceptions are cached just like normal values, we need an efficient\n// way of representing unknown, ordinary, and exceptional values.\ntype Value<T> =\n  | []           // unknown\n  | [T]          // known value\n  | [void, any]; // known exception\n\nfunction valueIs(a: Value<any>, b: Value<any>) {\n  const len = a.length;\n  return (\n    // Unknown values are not equal to each other.\n    len > 0 &&\n    // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length &&\n    // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\n\nfunction valueGet<T>(value: Value<T>): T {\n  switch (value.length) {\n    case 0: throw new Error(\"unknown value\");\n    case 1: return value[0];\n    case 2: throw value[1];\n  }\n}\n\nfunction valueCopy<T>(value: Value<T>): Value<T> {\n  return value.slice(0) as Value<T>;\n}\n\nexport type AnyEntry = Entry<any, any>;\n\nexport class Entry<TArgs extends any[], TValue> {\n  public static count = 0;\n\n  public subscribe: OptimisticWrapOptions<TArgs>[\"subscribe\"];\n  public unsubscribe?: () => any;\n  public reportOrphan?: (this: Entry<TArgs, TValue>) => any;\n\n  public readonly parents = new Set<AnyEntry>();\n  public readonly childValues = new Map<AnyEntry, Value<any>>();\n\n  // When this Entry has children that are dirty, this property becomes\n  // a Set containing other Entry objects, borrowed from emptySetPool.\n  // When the set becomes empty, it gets recycled back to emptySetPool.\n  public dirtyChildren: Set<AnyEntry> | null = null;\n\n  public dirty = true;\n  public recomputing = false;\n  public readonly value: Value<TValue> = [];\n\n  constructor(\n    public readonly fn: (...args: TArgs) => TValue,\n    public args: TArgs,\n  ) {\n    ++Entry.count;\n  }\n\n  // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n  public recompute(): TValue {\n    assert(! this.recomputing, \"already recomputing\");\n\n    if (! rememberParent(this) && maybeReportOrphan(this)) {\n      // The recipient of the entry.reportOrphan callback decided to dispose\n      // of this orphan entry by calling entry.dispose(), so we don't need to\n      // (and should not) proceed with the recomputation.\n      return void 0 as any;\n    }\n\n    return mightBeDirty(this)\n      ? reallyRecompute(this)\n      : valueGet(this.value);\n  }\n\n  public setDirty() {\n    if (this.dirty) return;\n    this.dirty = true;\n    this.value.length = 0;\n    reportDirty(this);\n    // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n    maybeUnsubscribe(this);\n  }\n\n  public dispose() {\n    forgetChildren(this).forEach(maybeReportOrphan);\n    maybeUnsubscribe(this);\n\n    // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n    this.parents.forEach(parent => {\n      parent.setDirty();\n      forgetChild(parent, this);\n    });\n  }\n}\n\nfunction rememberParent(child: AnyEntry) {\n  const parent = parentEntrySlot.getValue();\n  if (parent) {\n    child.parents.add(parent);\n\n    if (! parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n\n    return parent;\n  }\n}\n\nfunction reallyRecompute(entry: AnyEntry) {\n  // Since this recomputation is likely to re-remember some of this\n  // entry's children, we forget our children here but do not call\n  // maybeReportOrphan until after the recomputation finishes.\n  const originalChildren = forgetChildren(entry);\n\n  // Set entry as the parent entry while calling recomputeNewValue(entry).\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry]);\n\n  if (maybeSubscribe(entry)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  }\n\n  // Now that we've had a chance to re-remember any children that were\n  // involved in the recomputation, we can safely report any orphan\n  // children that remain.\n  originalChildren.forEach(maybeReportOrphan);\n\n  return valueGet(entry.value);\n}\n\nfunction recomputeNewValue(entry: AnyEntry) {\n  entry.recomputing = true;\n  // Set entry.value as unknown.\n  entry.value.length = 0;\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, entry.args);\n  } catch (e) {\n    // If entry.fn throws, entry.value will become exceptional.\n    entry.value[1] = e;\n  }\n  // Either way, this line is always reached.\n  entry.recomputing = false;\n}\n\nfunction mightBeDirty(entry: AnyEntry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\n\nfunction setClean(entry: AnyEntry) {\n  entry.dirty = false;\n\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n\n  reportClean(entry);\n}\n\nfunction reportDirty(child: AnyEntry) {\n  child.parents.forEach(parent => reportDirtyChild(parent, child));\n}\n\nfunction reportClean(child: AnyEntry) {\n  child.parents.forEach(parent => reportCleanChild(parent, child));\n}\n\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n\n  if (! parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set;\n\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n\n  parent.dirtyChildren.add(child);\n  reportDirty(parent);\n}\n\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(! mightBeDirty(child));\n\n  const childValue = parent.childValues.get(child)!;\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (! valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n\n  removeDirtyChild(parent, child);\n\n  if (mightBeDirty(parent)) {\n    return;\n  }\n\n  reportClean(parent);\n}\n\nfunction removeDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  const dc = parent.dirtyChildren;\n  if (dc) {\n    dc.delete(child);\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n      parent.dirtyChildren = null;\n    }\n  }\n}\n\n// If the given entry has a reportOrphan method, and no remaining parents,\n// call entry.reportOrphan and return true iff it returns true. The\n// reportOrphan function should return true to indicate entry.dispose()\n// has been called, and the entry has been removed from any other caches\n// (see index.js for the only current example).\nfunction maybeReportOrphan(entry: AnyEntry) {\n  return entry.parents.size === 0 &&\n    typeof entry.reportOrphan === \"function\" &&\n    entry.reportOrphan() === true;\n}\n\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent: AnyEntry) {\n  let children = reusableEmptyArray;\n\n  if (parent.childValues.size > 0) {\n    children = [];\n    parent.childValues.forEach((_value, child) => {\n      forgetChild(parent, child);\n      children.push(child);\n    });\n  }\n\n  // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n  assert(parent.dirtyChildren === null);\n\n  return children;\n}\n\nfunction forgetChild(parent: AnyEntry, child: AnyEntry) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\n\nfunction maybeSubscribe(entry: AnyEntry) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n      entry.unsubscribe = entry.subscribe.apply(null, entry.args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  }\n\n  // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n  return true;\n}\n\nfunction maybeUnsubscribe(entry: AnyEntry) {\n  const { unsubscribe } = entry;\n  if (typeof unsubscribe === \"function\") {\n    entry.unsubscribe = void 0;\n    unsubscribe();\n  }\n}\n","// A trie data structure that holds object keys weakly, yet can also hold\n// non-object keys, unlike the native `WeakMap`.\nexport class KeyTrie<K> {\n  // Since a `WeakMap` cannot hold primitive values as keys, we need a\n  // backup `Map` instance to hold primitive keys. Both `this._weakMap`\n  // and `this._strongMap` are lazily initialized.\n  private weak?: WeakMap<any, KeyTrie<K>>;\n  private strong?: Map<any, KeyTrie<K>>;\n  private data?: K;\n\n  constructor(private readonly weakness: boolean) {}\n\n  public lookup<T extends any[]>(...array: T): K {\n    return this.lookupArray(array);\n  }\n\n  public lookupArray<T extends any[]>(array: T): K {\n    let node: KeyTrie<K> = this;\n    array.forEach(key => node = node.getChildTrie(key));\n    return node.data || (node.data = Object.create(null));\n  }\n\n  private getChildTrie(key: any) {\n    const map = this.weakness && isObjRef(key)\n      ? this.weak || (this.weak = new WeakMap<any, KeyTrie<K>>())\n      : this.strong || (this.strong = new Map<any, KeyTrie<K>>());\n    let child = map.get(key);\n    if (!child) map.set(key, child = new KeyTrie<K>(this.weakness));\n    return child;\n  }\n}\n\nfunction isObjRef(value: any) {\n  switch (typeof value) {\n  case \"object\":\n    if (value === null) break;\n    // Fall through to return true...\n  case \"function\":\n    return true;\n  }\n  return false;\n}\n","import { Cache } from \"./cache\";\nimport { Entry, AnyEntry } from \"./entry\";\nimport { parentEntrySlot } from \"./context\";\nimport { KeyTrie } from \"./key-trie\";\n\n// These helper functions are important for making optimism work with\n// asynchronous code. In order to register parent-child dependencies,\n// optimism needs to know about any currently active parent computations.\n// In ordinary synchronous code, the parent context is implicit in the\n// execution stack, but asynchronous code requires some extra guidance in\n// order to propagate context from one async task segment to the next.\nexport {\n  bindContext,\n  noContext,\n  setTimeout,\n  asyncFromGen,\n} from \"./context\";\n\n// Since the Cache uses a Map internally, any value or object reference can\n// be safely used as a key, though common types include object and string.\nexport type TCacheKey = any;\n\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nconst keyTrie = new KeyTrie<TCacheKey>(typeof WeakMap === \"function\");\nexport function defaultMakeCacheKey(...args: any[]) {\n  return keyTrie.lookupArray(args);\n}\n\n// If you're paranoid about memory leaks, or you want to avoid using WeakMap\n// under the hood, but you still need the behavior of defaultMakeCacheKey,\n// import this constructor to create your own tries.\nexport { KeyTrie }\n\nexport type OptimisticWrapperFunction<\n  TArgs extends any[],\n  TResult,\n> = ((...args: TArgs) => TResult) & {\n  // The .dirty(...) method of an optimistic function takes exactly the\n  // same parameter types as the original function.\n  dirty: (...args: TArgs) => void;\n};\n\nexport type OptimisticWrapOptions<TArgs extends any[]> = {\n  // The maximum number of cache entries that should be retained before the\n  // cache begins evicting the oldest ones.\n  max?: number;\n  // If a wrapped function is \"disposable,\" then its creator does not\n  // care about its return value, and it should be removed from the cache\n  // immediately when it no longer has any parents that depend on it.\n  disposable?: boolean;\n  // The makeCacheKey function takes the same arguments that were passed to\n  // the wrapper function and returns a single value that can be used as a key\n  // in a Map to identify the cached result.\n  makeCacheKey?: (...args: TArgs) => TCacheKey;\n  // If provided, the subscribe function should either return an unsubscribe\n  // function or return nothing.\n  subscribe?: (...args: TArgs) => (() => any) | undefined;\n};\n\nconst caches = new Set<Cache<TCacheKey, AnyEntry>>();\n\nexport function wrap<\n  TArgs extends any[],\n  TResult,\n>(\n  originalFunction: (...args: TArgs) => TResult,\n  options: OptimisticWrapOptions<TArgs> = Object.create(null),\n) {\n  const cache = new Cache<TCacheKey, Entry<TArgs, TResult>>(\n    options.max || Math.pow(2, 16),\n    entry => entry.dispose(),\n  );\n\n  const disposable = !! options.disposable;\n  const makeCacheKey = options.makeCacheKey || defaultMakeCacheKey;\n\n  function optimistic(): TResult {\n    if (disposable && ! parentEntrySlot.hasValue()) {\n      // If there's no current parent computation, and this wrapped\n      // function is disposable (meaning we don't care about entry.value,\n      // just dependency tracking), then we can short-cut everything else\n      // in this function, because entry.recompute() is going to recycle\n      // the entry object without recomputing anything, anyway.\n      return void 0 as any;\n    }\n\n    const key = makeCacheKey.apply(null, arguments as any);\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments as any);\n    }\n\n    const args = Array.prototype.slice.call(arguments) as TArgs;\n\n    let entry = cache.get(key);\n    if (entry) {\n      entry.args = args;\n    } else {\n      entry = new Entry<TArgs, TResult>(originalFunction, args);\n      cache.set(key, entry);\n      entry.subscribe = options.subscribe;\n      if (disposable) {\n        entry.reportOrphan = () => cache.delete(key);\n      }\n    }\n\n    const value = entry.recompute();\n\n    // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n    cache.set(key, entry);\n\n    caches.add(cache);\n\n    // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n    if (! parentEntrySlot.hasValue()) {\n      caches.forEach(cache => cache.clean());\n      caches.clear();\n    }\n\n    // If options.disposable is truthy, the caller of wrap is telling us\n    // they don't care about the result of entry.recompute(), so we should\n    // avoid returning the value, so it won't be accidentally used.\n    return disposable ? void 0 as any : value;\n  }\n\n  optimistic.dirty = function () {\n    const key = makeCacheKey.apply(null, arguments as any);\n    const child = key !== void 0 && cache.get(key);\n    if (child) {\n      child.setDirty();\n    }\n  };\n\n  return optimistic as OptimisticWrapperFunction<TArgs, TResult>;\n}\n"]},"metadata":{},"sourceType":"module"}