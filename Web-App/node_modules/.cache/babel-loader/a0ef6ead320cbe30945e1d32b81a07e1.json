{"ast":null,"code":"import { getFragmentQueryDocument } from 'apollo-utilities';\n\nfunction queryFromPojo(obj) {\n  var op = {\n    kind: 'OperationDefinition',\n    operation: 'query',\n    name: {\n      kind: 'Name',\n      value: 'GeneratedClientQuery'\n    },\n    selectionSet: selectionSetFromObj(obj)\n  };\n  var out = {\n    kind: 'Document',\n    definitions: [op]\n  };\n  return out;\n}\n\nfunction fragmentFromPojo(obj, typename) {\n  var frag = {\n    kind: 'FragmentDefinition',\n    typeCondition: {\n      kind: 'NamedType',\n      name: {\n        kind: 'Name',\n        value: typename || '__FakeType'\n      }\n    },\n    name: {\n      kind: 'Name',\n      value: 'GeneratedClientQuery'\n    },\n    selectionSet: selectionSetFromObj(obj)\n  };\n  var out = {\n    kind: 'Document',\n    definitions: [frag]\n  };\n  return out;\n}\n\nfunction selectionSetFromObj(obj) {\n  if (typeof obj === 'number' || typeof obj === 'boolean' || typeof obj === 'string' || typeof obj === 'undefined' || obj === null) {\n    return null;\n  }\n\n  if (Array.isArray(obj)) {\n    return selectionSetFromObj(obj[0]);\n  }\n\n  var selections = [];\n  Object.keys(obj).forEach(function (key) {\n    var nestedSelSet = selectionSetFromObj(obj[key]);\n    var field = {\n      kind: 'Field',\n      name: {\n        kind: 'Name',\n        value: key\n      },\n      selectionSet: nestedSelSet || undefined\n    };\n    selections.push(field);\n  });\n  var selectionSet = {\n    kind: 'SelectionSet',\n    selections: selections\n  };\n  return selectionSet;\n}\n\nvar justTypenameQuery = {\n  kind: 'Document',\n  definitions: [{\n    kind: 'OperationDefinition',\n    operation: 'query',\n    name: null,\n    variableDefinitions: null,\n    directives: [],\n    selectionSet: {\n      kind: 'SelectionSet',\n      selections: [{\n        kind: 'Field',\n        alias: null,\n        name: {\n          kind: 'Name',\n          value: '__typename'\n        },\n        arguments: [],\n        directives: [],\n        selectionSet: null\n      }]\n    }\n  }]\n};\n\nvar ApolloCache = function () {\n  function ApolloCache() {}\n\n  ApolloCache.prototype.transformDocument = function (document) {\n    return document;\n  };\n\n  ApolloCache.prototype.transformForLink = function (document) {\n    return document;\n  };\n\n  ApolloCache.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return this.read({\n      query: options.query,\n      variables: options.variables,\n      optimistic: optimistic\n    });\n  };\n\n  ApolloCache.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return this.read({\n      query: getFragmentQueryDocument(options.fragment, options.fragmentName),\n      variables: options.variables,\n      rootId: options.id,\n      optimistic: optimistic\n    });\n  };\n\n  ApolloCache.prototype.writeQuery = function (options) {\n    this.write({\n      dataId: 'ROOT_QUERY',\n      result: options.data,\n      query: options.query,\n      variables: options.variables\n    });\n  };\n\n  ApolloCache.prototype.writeFragment = function (options) {\n    this.write({\n      dataId: options.id,\n      result: options.data,\n      variables: options.variables,\n      query: getFragmentQueryDocument(options.fragment, options.fragmentName)\n    });\n  };\n\n  ApolloCache.prototype.writeData = function (_a) {\n    var id = _a.id,\n        data = _a.data;\n\n    if (typeof id !== 'undefined') {\n      var typenameResult = null;\n\n      try {\n        typenameResult = this.read({\n          rootId: id,\n          optimistic: false,\n          query: justTypenameQuery\n        });\n      } catch (e) {}\n\n      var __typename = typenameResult && typenameResult.__typename || '__ClientData';\n\n      var dataToWrite = Object.assign({\n        __typename: __typename\n      }, data);\n      this.writeFragment({\n        id: id,\n        fragment: fragmentFromPojo(dataToWrite, __typename),\n        data: dataToWrite\n      });\n    } else {\n      this.writeQuery({\n        query: queryFromPojo(data),\n        data: data\n      });\n    }\n  };\n\n  return ApolloCache;\n}();\n\nvar Cache;\n\n(function (Cache) {})(Cache || (Cache = {}));\n\nexport { ApolloCache, Cache };","map":{"version":3,"mappings":"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","names":["queryFromPojo","obj","op","kind","operation","name","value","selectionSet","selectionSetFromObj","out","definitions","fragmentFromPojo","typename","frag","typeCondition","Array","isArray","selections","Object","keys","forEach","nestedSelSet","key","field","undefined","push","justTypenameQuery","variableDefinitions","directives","alias","arguments","ApolloCache","document","options","optimistic","read","query","variables","getFragmentQueryDocument","fragment","fragmentName","rootId","id","write","dataId","result","data","_a","typenameResult","e","__typename","dataToWrite","assign","writeFragment","writeQuery","Cache"],"sources":["../src/utils.ts","../src/cache.ts","../src/types/Cache.ts"],"sourcesContent":["import {\n  DocumentNode,\n  OperationDefinitionNode,\n  SelectionSetNode,\n  FieldNode,\n  FragmentDefinitionNode,\n} from 'graphql';\n\nexport function queryFromPojo(obj: any): DocumentNode {\n  const op: OperationDefinitionNode = {\n    kind: 'OperationDefinition',\n    operation: 'query',\n    name: {\n      kind: 'Name',\n      value: 'GeneratedClientQuery',\n    },\n    selectionSet: selectionSetFromObj(obj),\n  };\n\n  const out: DocumentNode = {\n    kind: 'Document',\n    definitions: [op],\n  };\n\n  return out;\n}\n\nexport function fragmentFromPojo(obj: any, typename?: string): DocumentNode {\n  const frag: FragmentDefinitionNode = {\n    kind: 'FragmentDefinition',\n    typeCondition: {\n      kind: 'NamedType',\n      name: {\n        kind: 'Name',\n        value: typename || '__FakeType',\n      },\n    },\n    name: {\n      kind: 'Name',\n      value: 'GeneratedClientQuery',\n    },\n    selectionSet: selectionSetFromObj(obj),\n  };\n\n  const out: DocumentNode = {\n    kind: 'Document',\n    definitions: [frag],\n  };\n\n  return out;\n}\n\nfunction selectionSetFromObj(obj: any): SelectionSetNode {\n  if (\n    typeof obj === 'number' ||\n    typeof obj === 'boolean' ||\n    typeof obj === 'string' ||\n    typeof obj === 'undefined' ||\n    obj === null\n  ) {\n    // No selection set here\n    return null;\n  }\n\n  if (Array.isArray(obj)) {\n    // GraphQL queries don't include arrays\n    return selectionSetFromObj(obj[0]);\n  }\n\n  // Now we know it's an object\n  const selections: FieldNode[] = [];\n\n  Object.keys(obj).forEach(key => {\n    const nestedSelSet: SelectionSetNode = selectionSetFromObj(obj[key]);\n\n    const field: FieldNode = {\n      kind: 'Field',\n      name: {\n        kind: 'Name',\n        value: key,\n      },\n      selectionSet: nestedSelSet || undefined,\n    };\n\n    selections.push(field);\n  });\n\n  const selectionSet: SelectionSetNode = {\n    kind: 'SelectionSet',\n    selections,\n  };\n\n  return selectionSet;\n}\n\nexport const justTypenameQuery: DocumentNode = {\n  kind: 'Document',\n  definitions: [\n    {\n      kind: 'OperationDefinition',\n      operation: 'query',\n      name: null,\n      variableDefinitions: null,\n      directives: [],\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [\n          {\n            kind: 'Field',\n            alias: null,\n            name: {\n              kind: 'Name',\n              value: '__typename',\n            },\n            arguments: [],\n            directives: [],\n            selectionSet: null,\n          },\n        ],\n      },\n    },\n  ],\n};\n","import { DocumentNode } from 'graphql';\nimport { getFragmentQueryDocument } from 'apollo-utilities';\n\nimport { DataProxy, Cache } from './types';\nimport { justTypenameQuery, queryFromPojo, fragmentFromPojo } from './utils';\n\nexport type Transaction<T> = (c: ApolloCache<T>) => void;\n\nexport abstract class ApolloCache<TSerialized> implements DataProxy {\n  // required to implement\n  // core API\n  public abstract read<T, TVariables = any>(\n    query: Cache.ReadOptions<TVariables>,\n  ): T | null;\n  public abstract write<TResult = any, TVariables = any>(\n    write: Cache.WriteOptions<TResult, TVariables>,\n  ): void;\n  public abstract diff<T>(query: Cache.DiffOptions): Cache.DiffResult<T>;\n  public abstract watch(watch: Cache.WatchOptions): () => void;\n  public abstract evict<TVariables = any>(\n    query: Cache.EvictOptions<TVariables>,\n  ): Cache.EvictionResult;\n  public abstract reset(): Promise<void>;\n\n  // intializer / offline / ssr API\n  /**\n   * Replaces existing state in the cache (if any) with the values expressed by\n   * `serializedState`.\n   *\n   * Called when hydrating a cache (server side rendering, or offline storage),\n   * and also (potentially) during hot reloads.\n   */\n  public abstract restore(\n    serializedState: TSerialized,\n  ): ApolloCache<TSerialized>;\n\n  /**\n   * Exposes the cache's complete state, in a serializable format for later restoration.\n   */\n  public abstract extract(optimistic?: boolean): TSerialized;\n\n  // optimistic API\n  public abstract removeOptimistic(id: string): void;\n\n  // transactional API\n  public abstract performTransaction(\n    transaction: Transaction<TSerialized>,\n  ): void;\n  public abstract recordOptimisticTransaction(\n    transaction: Transaction<TSerialized>,\n    id: string,\n  ): void;\n\n  // optional API\n  public transformDocument(document: DocumentNode): DocumentNode {\n    return document;\n  }\n  // experimental\n  public transformForLink(document: DocumentNode): DocumentNode {\n    return document;\n  }\n\n  // DataProxy API\n  /**\n   *\n   * @param options\n   * @param optimistic\n   */\n  public readQuery<QueryType, TVariables = any>(\n    options: DataProxy.Query<TVariables>,\n    optimistic: boolean = false,\n  ): QueryType | null {\n    return this.read({\n      query: options.query,\n      variables: options.variables,\n      optimistic,\n    });\n  }\n\n  public readFragment<FragmentType, TVariables = any>(\n    options: DataProxy.Fragment<TVariables>,\n    optimistic: boolean = false,\n  ): FragmentType | null {\n    return this.read({\n      query: getFragmentQueryDocument(options.fragment, options.fragmentName),\n      variables: options.variables,\n      rootId: options.id,\n      optimistic,\n    });\n  }\n\n  public writeQuery<TData = any, TVariables = any>(\n    options: Cache.WriteQueryOptions<TData, TVariables>,\n  ): void {\n    this.write({\n      dataId: 'ROOT_QUERY',\n      result: options.data,\n      query: options.query,\n      variables: options.variables,\n    });\n  }\n\n  public writeFragment<TData = any, TVariables = any>(\n    options: Cache.WriteFragmentOptions<TData, TVariables>,\n  ): void {\n    this.write({\n      dataId: options.id,\n      result: options.data,\n      variables: options.variables,\n      query: getFragmentQueryDocument(options.fragment, options.fragmentName),\n    });\n  }\n\n  public writeData<TData = any>({\n    id,\n    data,\n  }: Cache.WriteDataOptions<TData>): void {\n    if (typeof id !== 'undefined') {\n      let typenameResult = null;\n      // Since we can't use fragments without having a typename in the store,\n      // we need to make sure we have one.\n      // To avoid overwriting an existing typename, we need to read it out first\n      // and generate a fake one if none exists.\n      try {\n        typenameResult = this.read<any>({\n          rootId: id,\n          optimistic: false,\n          query: justTypenameQuery,\n        });\n      } catch (e) {\n        // Do nothing, since an error just means no typename exists\n      }\n\n      // tslint:disable-next-line\n      const __typename =\n        (typenameResult && typenameResult.__typename) || '__ClientData';\n\n      // Add a type here to satisfy the inmemory cache\n      const dataToWrite = Object.assign({ __typename }, data);\n\n      this.writeFragment({\n        id,\n        fragment: fragmentFromPojo(dataToWrite, __typename),\n        data: dataToWrite,\n      });\n    } else {\n      this.writeQuery({ query: queryFromPojo(data), data });\n    }\n  }\n}\n","import { DataProxy } from './DataProxy';\n\nexport namespace Cache {\n  export type WatchCallback = (newData: any) => void;\n  export interface EvictionResult {\n    success: Boolean;\n  }\n\n  export interface ReadOptions<TVariables = any>\n    extends DataProxy.Query<TVariables> {\n    rootId?: string;\n    previousResult?: any;\n    optimistic: boolean;\n  }\n\n  export interface WriteOptions<TResult = any, TVariables = any>\n    extends DataProxy.Query<TVariables> {\n    dataId: string;\n    result: TResult;\n  }\n\n  export interface DiffOptions extends ReadOptions {\n    returnPartialData?: boolean;\n  }\n\n  export interface WatchOptions extends ReadOptions {\n    callback: WatchCallback;\n  }\n\n  export interface EvictOptions<TVariables = any>\n    extends DataProxy.Query<TVariables> {\n    rootId?: string;\n  }\n\n  export import DiffResult = DataProxy.DiffResult;\n  export import WriteQueryOptions = DataProxy.WriteQueryOptions;\n  export import WriteFragmentOptions = DataProxy.WriteFragmentOptions;\n  export import WriteDataOptions = DataProxy.WriteDataOptions;\n  export import Fragment = DataProxy.Fragment;\n}\n"]},"metadata":{},"sourceType":"module"}