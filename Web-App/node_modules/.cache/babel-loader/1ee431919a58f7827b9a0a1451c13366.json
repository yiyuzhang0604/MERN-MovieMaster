{"ast":null,"code":"import { __extends } from 'tslib';\nvar genericMessage = \"Invariant Violation\";\nvar _a = Object.setPrototypeOf,\n    setPrototypeOf = _a === void 0 ? function (obj, proto) {\n  obj.__proto__ = proto;\n  return obj;\n} : _a;\n\nvar InvariantError =\n/** @class */\nfunction (_super) {\n  __extends(InvariantError, _super);\n\n  function InvariantError(message) {\n    if (message === void 0) {\n      message = genericMessage;\n    }\n\n    var _this = _super.call(this, typeof message === \"number\" ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\" : message) || this;\n\n    _this.framesToPop = 1;\n    _this.name = genericMessage;\n    setPrototypeOf(_this, InvariantError.prototype);\n    return _this;\n  }\n\n  return InvariantError;\n}(Error);\n\nfunction invariant(condition, message) {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n\nfunction wrapConsoleMethod(method) {\n  return function () {\n    return console[method].apply(console, arguments);\n  };\n}\n\n(function (invariant) {\n  invariant.warn = wrapConsoleMethod(\"warn\");\n  invariant.error = wrapConsoleMethod(\"error\");\n})(invariant || (invariant = {})); // Code that uses ts-invariant with rollup-plugin-invariant may want to\n// import this process stub to avoid errors evaluating process.env.NODE_ENV.\n// However, because most ESM-to-CJS compilers will rewrite the process import\n// as tsInvariant.process, which prevents proper replacement by minifiers, we\n// also attempt to define the stub globally when it is not already defined.\n\n\nvar processStub = {\n  env: {}\n};\n\nif (typeof process === \"object\") {\n  processStub = process;\n} else try {\n  // Using Function to evaluate this assignment in global scope also escapes\n  // the strict mode of the current module, thereby allowing the assignment.\n  // Inspired by https://github.com/facebook/regenerator/pull/369.\n  Function(\"stub\", \"process = stub\")(processStub);\n} catch (atLeastWeTried) {// The assignment can fail if a Content Security Policy heavy-handedly\n  // forbids Function usage. In those environments, developers should take\n  // extra care to replace process.env.NODE_ENV in their production builds,\n  // or define an appropriate global.process polyfill.\n}\n\nvar invariant$1 = invariant;\nexport default invariant$1;\nexport { InvariantError, invariant, processStub as process };","map":{"version":3,"mappings":";AAAA,IAAMA,cAAc,GAAG,qBAAvB;AAEE;AAAA;;;CAAA;;AAMF;AAAA;AAAA;AAAoCC;;AAGlC,0BAAYC,OAAZ,EAAqD;AAAzC;AAAAA;AAAyC;;AAArD,gBACEC,kBACE,OAAOD,OAAP,KAAmB,QAAnB,GACOF,cAAc,OAAd,GAAmBE,OAAnB,GAA0B,4DADjC,GAEIA,OAHN,KAIC,IALH;;AAFAE,wBAAc,CAAd;AACAA,iBAAOJ,cAAP;AAOEK,kBAAc,CAACD,KAAD,EAAOE,cAAc,CAACC,SAAtB,CAAd;;AACD;;AACH;AAXA,EAAoCC,KAApC;;SAagBC,UAAUC,WAAgBR,SAAyB;AACjE,MAAI,CAACQ,SAAL,EAAgB;AACd,UAAM,IAAIJ,cAAJ,CAAmBJ,OAAnB,CAAN;AACD;AACF;;AAED,SAASS,iBAAT,CAA2BC,MAA3B,EAAmD;AACjD,SAAO;AACL,WAAOC,OAAO,CAACD,MAAD,CAAP,CAAgBE,KAAhB,CAAsBD,OAAtB,EAA+BE,SAA/B,CAAP;AAC2B,GAF7B;AAGD;;AAED,WAAiBN,SAAjB,EAA0B;AACXA,mBAAOE,iBAAiB,CAAC,MAAD,CAAxB;AACAF,oBAAQE,iBAAiB,CAAC,OAAD,CAAzB;AACd,CAHD,EAAiBF,SAAS,KAATA,SAAS,MAA1B,E;;;;;;;AAUA,IAAIO,WAAW,GAAmB;AAAEC,KAAG,EAAE;AAAP,CAAlC;;AAEA,IAAI,OAAOC,OAAP,KAAmB,QADvB,EACiC;AAC/BF,aAAW,GAAGE,OAAd;AACD,CAFD,MAEO,IAAI;;;;AAITC,UAAQ,CAAC,MAAD,EAAS,gBAAT,CAAR,CAAmCH,WAAnC;AACD,CALM,CAKL,OAAOI,cAAP,EAAuB;;;;AAKxB;;AAED,kBAAeX,SAAf","names":["genericMessage","tslib_1.__extends","message","_super","_this","setPrototypeOf","InvariantError","prototype","Error","invariant","condition","wrapConsoleMethod","method","console","apply","arguments","processStub","env","process","Function","atLeastWeTried"],"sources":["../src/invariant.ts"],"sourcesContent":["const genericMessage = \"Invariant Violation\";\nconst {\n  setPrototypeOf = function (obj: any, proto: any) {\n    obj.__proto__ = proto;\n    return obj;\n  },\n} = Object as any;\n\nexport class InvariantError extends Error {\n  framesToPop = 1;\n  name = genericMessage;\n  constructor(message: string | number = genericMessage) {\n    super(\n      typeof message === \"number\"\n        ? `${genericMessage}: ${message} (see https://github.com/apollographql/invariant-packages)`\n        : message\n    );\n    setPrototypeOf(this, InvariantError.prototype);\n  }\n}\n\nexport function invariant(condition: any, message?: string | number) {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n\nfunction wrapConsoleMethod(method: \"warn\" | \"error\") {\n  return function () {\n    return console[method].apply(console, arguments as any);\n  } as (...args: any[]) => void;\n}\n\nexport namespace invariant {\n  export const warn = wrapConsoleMethod(\"warn\");\n  export const error = wrapConsoleMethod(\"error\");\n}\n\n// Code that uses ts-invariant with rollup-plugin-invariant may want to\n// import this process stub to avoid errors evaluating process.env.NODE_ENV.\n// However, because most ESM-to-CJS compilers will rewrite the process import\n// as tsInvariant.process, which prevents proper replacement by minifiers, we\n// also attempt to define the stub globally when it is not already defined.\nlet processStub: NodeJS.Process = { env: {} } as any;\nexport { processStub as process };\nif (typeof process === \"object\") {\n  processStub = process;\n} else try {\n  // Using Function to evaluate this assignment in global scope also escapes\n  // the strict mode of the current module, thereby allowing the assignment.\n  // Inspired by https://github.com/facebook/regenerator/pull/369.\n  Function(\"stub\", \"process = stub\")(processStub);\n} catch (atLeastWeTried) {\n  // The assignment can fail if a Content Security Policy heavy-handedly\n  // forbids Function usage. In those environments, developers should take\n  // extra care to replace process.env.NODE_ENV in their production builds,\n  // or define an appropriate global.process polyfill.\n}\n\nexport default invariant;\n"]},"metadata":{},"sourceType":"module"}