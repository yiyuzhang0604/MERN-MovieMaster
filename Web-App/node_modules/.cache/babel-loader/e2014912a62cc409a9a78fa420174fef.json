{"ast":null,"code":"import { __assign, __extends } from 'tslib';\nimport { ApolloCache } from 'apollo-cache';\nimport { isTest, getQueryDefinition, assign, getDefaultValues, isEqual, getMainDefinition, getFragmentDefinitions, createFragmentMap, shouldInclude, isField, resultKeyNameFromField, isInlineFragment, mergeDeepArray, argumentsObjectFromField, getDirectiveInfoFromField, maybeDeepFreeze, isIdValue, getStoreKeyName, toIdValue, isJsonValue, canUseWeakMap, getOperationDefinition, isProduction, storeKeyNameFromField, addTypenameToDocument } from 'apollo-utilities';\nimport { wrap, KeyTrie } from 'optimism';\nimport { invariant, InvariantError } from 'ts-invariant';\nvar haveWarned = false;\n\nfunction shouldWarn() {\n  var answer = !haveWarned;\n\n  if (!isTest()) {\n    haveWarned = true;\n  }\n\n  return answer;\n}\n\nvar HeuristicFragmentMatcher = function () {\n  function HeuristicFragmentMatcher() {}\n\n  HeuristicFragmentMatcher.prototype.ensureReady = function () {\n    return Promise.resolve();\n  };\n\n  HeuristicFragmentMatcher.prototype.canBypassInit = function () {\n    return true;\n  };\n\n  HeuristicFragmentMatcher.prototype.match = function (idValue, typeCondition, context) {\n    var obj = context.store.get(idValue.id);\n    var isRootQuery = idValue.id === 'ROOT_QUERY';\n\n    if (!obj) {\n      return isRootQuery;\n    }\n\n    var _a = obj.__typename,\n        __typename = _a === void 0 ? isRootQuery && 'Query' : _a;\n\n    if (!__typename) {\n      if (shouldWarn()) {\n        process.env.NODE_ENV === \"production\" || invariant.warn(\"You're using fragments in your queries, but either don't have the addTypename:\\n  true option set in Apollo Client, or you are trying to write a fragment to the store without the __typename.\\n   Please turn on the addTypename option and include __typename when writing fragments so that Apollo Client\\n   can accurately match fragments.\");\n        process.env.NODE_ENV === \"production\" || invariant.warn('Could not find __typename on Fragment ', typeCondition, obj);\n        process.env.NODE_ENV === \"production\" || invariant.warn(\"DEPRECATION WARNING: using fragments without __typename is unsupported behavior \" + \"and will be removed in future versions of Apollo client. You should fix this and set addTypename to true now.\");\n      }\n\n      return 'heuristic';\n    }\n\n    if (__typename === typeCondition) {\n      return true;\n    }\n\n    if (shouldWarn()) {\n      process.env.NODE_ENV === \"production\" || invariant.error('You are using the simple (heuristic) fragment matcher, but your ' + 'queries contain union or interface types. Apollo Client will not be ' + 'able to accurately map fragments. To make this error go away, use ' + 'the `IntrospectionFragmentMatcher` as described in the docs: ' + 'https://www.apollographql.com/docs/react/advanced/fragments.html#fragment-matcher');\n    }\n\n    return 'heuristic';\n  };\n\n  return HeuristicFragmentMatcher;\n}();\n\nvar IntrospectionFragmentMatcher = function () {\n  function IntrospectionFragmentMatcher(options) {\n    if (options && options.introspectionQueryResultData) {\n      this.possibleTypesMap = this.parseIntrospectionResult(options.introspectionQueryResultData);\n      this.isReady = true;\n    } else {\n      this.isReady = false;\n    }\n\n    this.match = this.match.bind(this);\n  }\n\n  IntrospectionFragmentMatcher.prototype.match = function (idValue, typeCondition, context) {\n    process.env.NODE_ENV === \"production\" ? invariant(this.isReady, 1) : invariant(this.isReady, 'FragmentMatcher.match() was called before FragmentMatcher.init()');\n    var obj = context.store.get(idValue.id);\n    var isRootQuery = idValue.id === 'ROOT_QUERY';\n\n    if (!obj) {\n      return isRootQuery;\n    }\n\n    var _a = obj.__typename,\n        __typename = _a === void 0 ? isRootQuery && 'Query' : _a;\n\n    process.env.NODE_ENV === \"production\" ? invariant(__typename, 2) : invariant(__typename, \"Cannot match fragment because __typename property is missing: \" + JSON.stringify(obj));\n\n    if (__typename === typeCondition) {\n      return true;\n    }\n\n    var implementingTypes = this.possibleTypesMap[typeCondition];\n\n    if (__typename && implementingTypes && implementingTypes.indexOf(__typename) > -1) {\n      return true;\n    }\n\n    return false;\n  };\n\n  IntrospectionFragmentMatcher.prototype.parseIntrospectionResult = function (introspectionResultData) {\n    var typeMap = {};\n\n    introspectionResultData.__schema.types.forEach(function (type) {\n      if (type.kind === 'UNION' || type.kind === 'INTERFACE') {\n        typeMap[type.name] = type.possibleTypes.map(function (implementingType) {\n          return implementingType.name;\n        });\n      }\n    });\n\n    return typeMap;\n  };\n\n  return IntrospectionFragmentMatcher;\n}();\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nvar DepTrackingCache = function () {\n  function DepTrackingCache(data) {\n    var _this = this;\n\n    if (data === void 0) {\n      data = Object.create(null);\n    }\n\n    this.data = data;\n    this.depend = wrap(function (dataId) {\n      return _this.data[dataId];\n    }, {\n      disposable: true,\n      makeCacheKey: function (dataId) {\n        return dataId;\n      }\n    });\n  }\n\n  DepTrackingCache.prototype.toObject = function () {\n    return this.data;\n  };\n\n  DepTrackingCache.prototype.get = function (dataId) {\n    this.depend(dataId);\n    return this.data[dataId];\n  };\n\n  DepTrackingCache.prototype.set = function (dataId, value) {\n    var oldValue = this.data[dataId];\n\n    if (value !== oldValue) {\n      this.data[dataId] = value;\n      this.depend.dirty(dataId);\n    }\n  };\n\n  DepTrackingCache.prototype.delete = function (dataId) {\n    if (hasOwn.call(this.data, dataId)) {\n      delete this.data[dataId];\n      this.depend.dirty(dataId);\n    }\n  };\n\n  DepTrackingCache.prototype.clear = function () {\n    this.replace(null);\n  };\n\n  DepTrackingCache.prototype.replace = function (newData) {\n    var _this = this;\n\n    if (newData) {\n      Object.keys(newData).forEach(function (dataId) {\n        _this.set(dataId, newData[dataId]);\n      });\n      Object.keys(this.data).forEach(function (dataId) {\n        if (!hasOwn.call(newData, dataId)) {\n          _this.delete(dataId);\n        }\n      });\n    } else {\n      Object.keys(this.data).forEach(function (dataId) {\n        _this.delete(dataId);\n      });\n    }\n  };\n\n  return DepTrackingCache;\n}();\n\nfunction defaultNormalizedCacheFactory(seed) {\n  return new DepTrackingCache(seed);\n}\n\nvar StoreReader = function () {\n  function StoreReader(_a) {\n    var _this = this;\n\n    var _b = _a === void 0 ? {} : _a,\n        _c = _b.cacheKeyRoot,\n        cacheKeyRoot = _c === void 0 ? new KeyTrie(canUseWeakMap) : _c,\n        _d = _b.freezeResults,\n        freezeResults = _d === void 0 ? false : _d;\n\n    var _e = this,\n        executeStoreQuery = _e.executeStoreQuery,\n        executeSelectionSet = _e.executeSelectionSet,\n        executeSubSelectedArray = _e.executeSubSelectedArray;\n\n    this.freezeResults = freezeResults;\n    this.executeStoreQuery = wrap(function (options) {\n      return executeStoreQuery.call(_this, options);\n    }, {\n      makeCacheKey: function (_a) {\n        var query = _a.query,\n            rootValue = _a.rootValue,\n            contextValue = _a.contextValue,\n            variableValues = _a.variableValues,\n            fragmentMatcher = _a.fragmentMatcher;\n\n        if (contextValue.store instanceof DepTrackingCache) {\n          return cacheKeyRoot.lookup(contextValue.store, query, fragmentMatcher, JSON.stringify(variableValues), rootValue.id);\n        }\n      }\n    });\n    this.executeSelectionSet = wrap(function (options) {\n      return executeSelectionSet.call(_this, options);\n    }, {\n      makeCacheKey: function (_a) {\n        var selectionSet = _a.selectionSet,\n            rootValue = _a.rootValue,\n            execContext = _a.execContext;\n\n        if (execContext.contextValue.store instanceof DepTrackingCache) {\n          return cacheKeyRoot.lookup(execContext.contextValue.store, selectionSet, execContext.fragmentMatcher, JSON.stringify(execContext.variableValues), rootValue.id);\n        }\n      }\n    });\n    this.executeSubSelectedArray = wrap(function (options) {\n      return executeSubSelectedArray.call(_this, options);\n    }, {\n      makeCacheKey: function (_a) {\n        var field = _a.field,\n            array = _a.array,\n            execContext = _a.execContext;\n\n        if (execContext.contextValue.store instanceof DepTrackingCache) {\n          return cacheKeyRoot.lookup(execContext.contextValue.store, field, array, JSON.stringify(execContext.variableValues));\n        }\n      }\n    });\n  }\n\n  StoreReader.prototype.readQueryFromStore = function (options) {\n    return this.diffQueryAgainstStore(__assign(__assign({}, options), {\n      returnPartialData: false\n    })).result;\n  };\n\n  StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n    var store = _a.store,\n        query = _a.query,\n        variables = _a.variables,\n        previousResult = _a.previousResult,\n        _b = _a.returnPartialData,\n        returnPartialData = _b === void 0 ? true : _b,\n        _c = _a.rootId,\n        rootId = _c === void 0 ? 'ROOT_QUERY' : _c,\n        fragmentMatcherFunction = _a.fragmentMatcherFunction,\n        config = _a.config;\n    var queryDefinition = getQueryDefinition(query);\n    variables = assign({}, getDefaultValues(queryDefinition), variables);\n    var context = {\n      store: store,\n      dataIdFromObject: config && config.dataIdFromObject,\n      cacheRedirects: config && config.cacheRedirects || {}\n    };\n    var execResult = this.executeStoreQuery({\n      query: query,\n      rootValue: {\n        type: 'id',\n        id: rootId,\n        generated: true,\n        typename: 'Query'\n      },\n      contextValue: context,\n      variableValues: variables,\n      fragmentMatcher: fragmentMatcherFunction\n    });\n    var hasMissingFields = execResult.missing && execResult.missing.length > 0;\n\n    if (hasMissingFields && !returnPartialData) {\n      execResult.missing.forEach(function (info) {\n        if (info.tolerable) return;\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(8) : new InvariantError(\"Can't find field \" + info.fieldName + \" on object \" + JSON.stringify(info.object, null, 2) + \".\");\n      });\n    }\n\n    if (previousResult) {\n      if (isEqual(previousResult, execResult.result)) {\n        execResult.result = previousResult;\n      }\n    }\n\n    return {\n      result: execResult.result,\n      complete: !hasMissingFields\n    };\n  };\n\n  StoreReader.prototype.executeStoreQuery = function (_a) {\n    var query = _a.query,\n        rootValue = _a.rootValue,\n        contextValue = _a.contextValue,\n        variableValues = _a.variableValues,\n        _b = _a.fragmentMatcher,\n        fragmentMatcher = _b === void 0 ? defaultFragmentMatcher : _b;\n    var mainDefinition = getMainDefinition(query);\n    var fragments = getFragmentDefinitions(query);\n    var fragmentMap = createFragmentMap(fragments);\n    var execContext = {\n      query: query,\n      fragmentMap: fragmentMap,\n      contextValue: contextValue,\n      variableValues: variableValues,\n      fragmentMatcher: fragmentMatcher\n    };\n    return this.executeSelectionSet({\n      selectionSet: mainDefinition.selectionSet,\n      rootValue: rootValue,\n      execContext: execContext\n    });\n  };\n\n  StoreReader.prototype.executeSelectionSet = function (_a) {\n    var _this = this;\n\n    var selectionSet = _a.selectionSet,\n        rootValue = _a.rootValue,\n        execContext = _a.execContext;\n    var fragmentMap = execContext.fragmentMap,\n        contextValue = execContext.contextValue,\n        variables = execContext.variableValues;\n    var finalResult = {\n      result: null\n    };\n    var objectsToMerge = [];\n    var object = contextValue.store.get(rootValue.id);\n    var typename = object && object.__typename || rootValue.id === 'ROOT_QUERY' && 'Query' || void 0;\n\n    function handleMissing(result) {\n      var _a;\n\n      if (result.missing) {\n        finalResult.missing = finalResult.missing || [];\n\n        (_a = finalResult.missing).push.apply(_a, result.missing);\n      }\n\n      return result.result;\n    }\n\n    selectionSet.selections.forEach(function (selection) {\n      var _a;\n\n      if (!shouldInclude(selection, variables)) {\n        return;\n      }\n\n      if (isField(selection)) {\n        var fieldResult = handleMissing(_this.executeField(object, typename, selection, execContext));\n\n        if (typeof fieldResult !== 'undefined') {\n          objectsToMerge.push((_a = {}, _a[resultKeyNameFromField(selection)] = fieldResult, _a));\n        }\n      } else {\n        var fragment = void 0;\n\n        if (isInlineFragment(selection)) {\n          fragment = selection;\n        } else {\n          fragment = fragmentMap[selection.name.value];\n\n          if (!fragment) {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError(9) : new InvariantError(\"No fragment named \" + selection.name.value);\n          }\n        }\n\n        var typeCondition = fragment.typeCondition && fragment.typeCondition.name.value;\n        var match = !typeCondition || execContext.fragmentMatcher(rootValue, typeCondition, contextValue);\n\n        if (match) {\n          var fragmentExecResult = _this.executeSelectionSet({\n            selectionSet: fragment.selectionSet,\n            rootValue: rootValue,\n            execContext: execContext\n          });\n\n          if (match === 'heuristic' && fragmentExecResult.missing) {\n            fragmentExecResult = __assign(__assign({}, fragmentExecResult), {\n              missing: fragmentExecResult.missing.map(function (info) {\n                return __assign(__assign({}, info), {\n                  tolerable: true\n                });\n              })\n            });\n          }\n\n          objectsToMerge.push(handleMissing(fragmentExecResult));\n        }\n      }\n    });\n    finalResult.result = mergeDeepArray(objectsToMerge);\n\n    if (this.freezeResults && process.env.NODE_ENV !== 'production') {\n      Object.freeze(finalResult.result);\n    }\n\n    return finalResult;\n  };\n\n  StoreReader.prototype.executeField = function (object, typename, field, execContext) {\n    var variables = execContext.variableValues,\n        contextValue = execContext.contextValue;\n    var fieldName = field.name.value;\n    var args = argumentsObjectFromField(field, variables);\n    var info = {\n      resultKey: resultKeyNameFromField(field),\n      directives: getDirectiveInfoFromField(field, variables)\n    };\n    var readStoreResult = readStoreResolver(object, typename, fieldName, args, contextValue, info);\n\n    if (Array.isArray(readStoreResult.result)) {\n      return this.combineExecResults(readStoreResult, this.executeSubSelectedArray({\n        field: field,\n        array: readStoreResult.result,\n        execContext: execContext\n      }));\n    }\n\n    if (!field.selectionSet) {\n      assertSelectionSetForIdValue(field, readStoreResult.result);\n\n      if (this.freezeResults && process.env.NODE_ENV !== 'production') {\n        maybeDeepFreeze(readStoreResult);\n      }\n\n      return readStoreResult;\n    }\n\n    if (readStoreResult.result == null) {\n      return readStoreResult;\n    }\n\n    return this.combineExecResults(readStoreResult, this.executeSelectionSet({\n      selectionSet: field.selectionSet,\n      rootValue: readStoreResult.result,\n      execContext: execContext\n    }));\n  };\n\n  StoreReader.prototype.combineExecResults = function () {\n    var execResults = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      execResults[_i] = arguments[_i];\n    }\n\n    var missing;\n    execResults.forEach(function (execResult) {\n      if (execResult.missing) {\n        missing = missing || [];\n        missing.push.apply(missing, execResult.missing);\n      }\n    });\n    return {\n      result: execResults.pop().result,\n      missing: missing\n    };\n  };\n\n  StoreReader.prototype.executeSubSelectedArray = function (_a) {\n    var _this = this;\n\n    var field = _a.field,\n        array = _a.array,\n        execContext = _a.execContext;\n    var missing;\n\n    function handleMissing(childResult) {\n      if (childResult.missing) {\n        missing = missing || [];\n        missing.push.apply(missing, childResult.missing);\n      }\n\n      return childResult.result;\n    }\n\n    array = array.map(function (item) {\n      if (item === null) {\n        return null;\n      }\n\n      if (Array.isArray(item)) {\n        return handleMissing(_this.executeSubSelectedArray({\n          field: field,\n          array: item,\n          execContext: execContext\n        }));\n      }\n\n      if (field.selectionSet) {\n        return handleMissing(_this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          rootValue: item,\n          execContext: execContext\n        }));\n      }\n\n      assertSelectionSetForIdValue(field, item);\n      return item;\n    });\n\n    if (this.freezeResults && process.env.NODE_ENV !== 'production') {\n      Object.freeze(array);\n    }\n\n    return {\n      result: array,\n      missing: missing\n    };\n  };\n\n  return StoreReader;\n}();\n\nfunction assertSelectionSetForIdValue(field, value) {\n  if (!field.selectionSet && isIdValue(value)) {\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(10) : new InvariantError(\"Missing selection set for object of type \" + value.typename + \" returned for query field \" + field.name.value);\n  }\n}\n\nfunction defaultFragmentMatcher() {\n  return true;\n}\n\nfunction assertIdValue(idValue) {\n  process.env.NODE_ENV === \"production\" ? invariant(isIdValue(idValue), 11) : invariant(isIdValue(idValue), \"Encountered a sub-selection on the query, but the store doesn't have an object reference. This should never happen during normal use unless you have custom code that is directly manipulating the store; please file an issue.\");\n}\n\nfunction readStoreResolver(object, typename, fieldName, args, context, _a) {\n  var resultKey = _a.resultKey,\n      directives = _a.directives;\n  var storeKeyName = fieldName;\n\n  if (args || directives) {\n    storeKeyName = getStoreKeyName(storeKeyName, args, directives);\n  }\n\n  var fieldValue = void 0;\n\n  if (object) {\n    fieldValue = object[storeKeyName];\n\n    if (typeof fieldValue === 'undefined' && context.cacheRedirects && typeof typename === 'string') {\n      var type = context.cacheRedirects[typename];\n\n      if (type) {\n        var resolver = type[fieldName];\n\n        if (resolver) {\n          fieldValue = resolver(object, args, {\n            getCacheKey: function (storeObj) {\n              var id = context.dataIdFromObject(storeObj);\n              return id && toIdValue({\n                id: id,\n                typename: storeObj.__typename\n              });\n            }\n          });\n        }\n      }\n    }\n  }\n\n  if (typeof fieldValue === 'undefined') {\n    return {\n      result: fieldValue,\n      missing: [{\n        object: object,\n        fieldName: storeKeyName,\n        tolerable: false\n      }]\n    };\n  }\n\n  if (isJsonValue(fieldValue)) {\n    fieldValue = fieldValue.json;\n  }\n\n  return {\n    result: fieldValue\n  };\n}\n\nvar ObjectCache = function () {\n  function ObjectCache(data) {\n    if (data === void 0) {\n      data = Object.create(null);\n    }\n\n    this.data = data;\n  }\n\n  ObjectCache.prototype.toObject = function () {\n    return this.data;\n  };\n\n  ObjectCache.prototype.get = function (dataId) {\n    return this.data[dataId];\n  };\n\n  ObjectCache.prototype.set = function (dataId, value) {\n    this.data[dataId] = value;\n  };\n\n  ObjectCache.prototype.delete = function (dataId) {\n    this.data[dataId] = void 0;\n  };\n\n  ObjectCache.prototype.clear = function () {\n    this.data = Object.create(null);\n  };\n\n  ObjectCache.prototype.replace = function (newData) {\n    this.data = newData || Object.create(null);\n  };\n\n  return ObjectCache;\n}();\n\nfunction defaultNormalizedCacheFactory$1(seed) {\n  return new ObjectCache(seed);\n}\n\nvar WriteError = function (_super) {\n  __extends(WriteError, _super);\n\n  function WriteError() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'WriteError';\n    return _this;\n  }\n\n  return WriteError;\n}(Error);\n\nfunction enhanceErrorWithDocument(error, document) {\n  var enhancedError = new WriteError(\"Error writing result to store for query:\\n \" + JSON.stringify(document));\n  enhancedError.message += '\\n' + error.message;\n  enhancedError.stack = error.stack;\n  return enhancedError;\n}\n\nvar StoreWriter = function () {\n  function StoreWriter() {}\n\n  StoreWriter.prototype.writeQueryToStore = function (_a) {\n    var query = _a.query,\n        result = _a.result,\n        _b = _a.store,\n        store = _b === void 0 ? defaultNormalizedCacheFactory() : _b,\n        variables = _a.variables,\n        dataIdFromObject = _a.dataIdFromObject,\n        fragmentMatcherFunction = _a.fragmentMatcherFunction;\n    return this.writeResultToStore({\n      dataId: 'ROOT_QUERY',\n      result: result,\n      document: query,\n      store: store,\n      variables: variables,\n      dataIdFromObject: dataIdFromObject,\n      fragmentMatcherFunction: fragmentMatcherFunction\n    });\n  };\n\n  StoreWriter.prototype.writeResultToStore = function (_a) {\n    var dataId = _a.dataId,\n        result = _a.result,\n        document = _a.document,\n        _b = _a.store,\n        store = _b === void 0 ? defaultNormalizedCacheFactory() : _b,\n        variables = _a.variables,\n        dataIdFromObject = _a.dataIdFromObject,\n        fragmentMatcherFunction = _a.fragmentMatcherFunction;\n    var operationDefinition = getOperationDefinition(document);\n\n    try {\n      return this.writeSelectionSetToStore({\n        result: result,\n        dataId: dataId,\n        selectionSet: operationDefinition.selectionSet,\n        context: {\n          store: store,\n          processedData: {},\n          variables: assign({}, getDefaultValues(operationDefinition), variables),\n          dataIdFromObject: dataIdFromObject,\n          fragmentMap: createFragmentMap(getFragmentDefinitions(document)),\n          fragmentMatcherFunction: fragmentMatcherFunction\n        }\n      });\n    } catch (e) {\n      throw enhanceErrorWithDocument(e, document);\n    }\n  };\n\n  StoreWriter.prototype.writeSelectionSetToStore = function (_a) {\n    var _this = this;\n\n    var result = _a.result,\n        dataId = _a.dataId,\n        selectionSet = _a.selectionSet,\n        context = _a.context;\n    var variables = context.variables,\n        store = context.store,\n        fragmentMap = context.fragmentMap;\n    selectionSet.selections.forEach(function (selection) {\n      var _a;\n\n      if (!shouldInclude(selection, variables)) {\n        return;\n      }\n\n      if (isField(selection)) {\n        var resultFieldKey = resultKeyNameFromField(selection);\n        var value = result[resultFieldKey];\n\n        if (typeof value !== 'undefined') {\n          _this.writeFieldToStore({\n            dataId: dataId,\n            value: value,\n            field: selection,\n            context: context\n          });\n        } else {\n          var isDefered = false;\n          var isClient = false;\n\n          if (selection.directives && selection.directives.length) {\n            isDefered = selection.directives.some(function (directive) {\n              return directive.name && directive.name.value === 'defer';\n            });\n            isClient = selection.directives.some(function (directive) {\n              return directive.name && directive.name.value === 'client';\n            });\n          }\n\n          if (!isDefered && !isClient && context.fragmentMatcherFunction) {\n            process.env.NODE_ENV === \"production\" || invariant.warn(\"Missing field \" + resultFieldKey + \" in \" + JSON.stringify(result, null, 2).substring(0, 100));\n          }\n        }\n      } else {\n        var fragment = void 0;\n\n        if (isInlineFragment(selection)) {\n          fragment = selection;\n        } else {\n          fragment = (fragmentMap || {})[selection.name.value];\n          process.env.NODE_ENV === \"production\" ? invariant(fragment, 3) : invariant(fragment, \"No fragment named \" + selection.name.value + \".\");\n        }\n\n        var matches = true;\n\n        if (context.fragmentMatcherFunction && fragment.typeCondition) {\n          var id = dataId || 'self';\n          var idValue = toIdValue({\n            id: id,\n            typename: undefined\n          });\n          var fakeContext = {\n            store: new ObjectCache((_a = {}, _a[id] = result, _a)),\n            cacheRedirects: {}\n          };\n          var match = context.fragmentMatcherFunction(idValue, fragment.typeCondition.name.value, fakeContext);\n\n          if (!isProduction() && match === 'heuristic') {\n            process.env.NODE_ENV === \"production\" || invariant.error('WARNING: heuristic fragment matching going on!');\n          }\n\n          matches = !!match;\n        }\n\n        if (matches) {\n          _this.writeSelectionSetToStore({\n            result: result,\n            selectionSet: fragment.selectionSet,\n            dataId: dataId,\n            context: context\n          });\n        }\n      }\n    });\n    return store;\n  };\n\n  StoreWriter.prototype.writeFieldToStore = function (_a) {\n    var _b;\n\n    var field = _a.field,\n        value = _a.value,\n        dataId = _a.dataId,\n        context = _a.context;\n    var variables = context.variables,\n        dataIdFromObject = context.dataIdFromObject,\n        store = context.store;\n    var storeValue;\n    var storeObject;\n    var storeFieldName = storeKeyNameFromField(field, variables);\n\n    if (!field.selectionSet || value === null) {\n      storeValue = value != null && typeof value === 'object' ? {\n        type: 'json',\n        json: value\n      } : value;\n    } else if (Array.isArray(value)) {\n      var generatedId = dataId + \".\" + storeFieldName;\n      storeValue = this.processArrayValue(value, generatedId, field.selectionSet, context);\n    } else {\n      var valueDataId = dataId + \".\" + storeFieldName;\n      var generated = true;\n\n      if (!isGeneratedId(valueDataId)) {\n        valueDataId = '$' + valueDataId;\n      }\n\n      if (dataIdFromObject) {\n        var semanticId = dataIdFromObject(value);\n        process.env.NODE_ENV === \"production\" ? invariant(!semanticId || !isGeneratedId(semanticId), 4) : invariant(!semanticId || !isGeneratedId(semanticId), 'IDs returned by dataIdFromObject cannot begin with the \"$\" character.');\n\n        if (semanticId || typeof semanticId === 'number' && semanticId === 0) {\n          valueDataId = semanticId;\n          generated = false;\n        }\n      }\n\n      if (!isDataProcessed(valueDataId, field, context.processedData)) {\n        this.writeSelectionSetToStore({\n          dataId: valueDataId,\n          result: value,\n          selectionSet: field.selectionSet,\n          context: context\n        });\n      }\n\n      var typename = value.__typename;\n      storeValue = toIdValue({\n        id: valueDataId,\n        typename: typename\n      }, generated);\n      storeObject = store.get(dataId);\n      var escapedId = storeObject && storeObject[storeFieldName];\n\n      if (escapedId !== storeValue && isIdValue(escapedId)) {\n        var hadTypename = escapedId.typename !== undefined;\n        var hasTypename = typename !== undefined;\n        var typenameChanged = hadTypename && hasTypename && escapedId.typename !== typename;\n        process.env.NODE_ENV === \"production\" ? invariant(!generated || escapedId.generated || typenameChanged, 5) : invariant(!generated || escapedId.generated || typenameChanged, \"Store error: the application attempted to write an object with no provided id but the store already contains an id of \" + escapedId.id + \" for this object. The selectionSet that was trying to be written is:\\n\" + JSON.stringify(field));\n        process.env.NODE_ENV === \"production\" ? invariant(!hadTypename || hasTypename, 6) : invariant(!hadTypename || hasTypename, \"Store error: the application attempted to write an object with no provided typename but the store already contains an object with typename of \" + escapedId.typename + \" for the object of id \" + escapedId.id + \". The selectionSet that was trying to be written is:\\n\" + JSON.stringify(field));\n\n        if (escapedId.generated) {\n          if (typenameChanged) {\n            if (!generated) {\n              store.delete(escapedId.id);\n            }\n          } else {\n            mergeWithGenerated(escapedId.id, storeValue.id, store);\n          }\n        }\n      }\n    }\n\n    storeObject = store.get(dataId);\n\n    if (!storeObject || !isEqual(storeValue, storeObject[storeFieldName])) {\n      store.set(dataId, __assign(__assign({}, storeObject), (_b = {}, _b[storeFieldName] = storeValue, _b)));\n    }\n  };\n\n  StoreWriter.prototype.processArrayValue = function (value, generatedId, selectionSet, context) {\n    var _this = this;\n\n    return value.map(function (item, index) {\n      if (item === null) {\n        return null;\n      }\n\n      var itemDataId = generatedId + \".\" + index;\n\n      if (Array.isArray(item)) {\n        return _this.processArrayValue(item, itemDataId, selectionSet, context);\n      }\n\n      var generated = true;\n\n      if (context.dataIdFromObject) {\n        var semanticId = context.dataIdFromObject(item);\n\n        if (semanticId) {\n          itemDataId = semanticId;\n          generated = false;\n        }\n      }\n\n      if (!isDataProcessed(itemDataId, selectionSet, context.processedData)) {\n        _this.writeSelectionSetToStore({\n          dataId: itemDataId,\n          result: item,\n          selectionSet: selectionSet,\n          context: context\n        });\n      }\n\n      return toIdValue({\n        id: itemDataId,\n        typename: item.__typename\n      }, generated);\n    });\n  };\n\n  return StoreWriter;\n}();\n\nfunction isGeneratedId(id) {\n  return id[0] === '$';\n}\n\nfunction mergeWithGenerated(generatedKey, realKey, cache) {\n  if (generatedKey === realKey) {\n    return false;\n  }\n\n  var generated = cache.get(generatedKey);\n  var real = cache.get(realKey);\n  var madeChanges = false;\n  Object.keys(generated).forEach(function (key) {\n    var value = generated[key];\n    var realValue = real[key];\n\n    if (isIdValue(value) && isGeneratedId(value.id) && isIdValue(realValue) && !isEqual(value, realValue) && mergeWithGenerated(value.id, realValue.id, cache)) {\n      madeChanges = true;\n    }\n  });\n  cache.delete(generatedKey);\n\n  var newRealValue = __assign(__assign({}, generated), real);\n\n  if (isEqual(newRealValue, real)) {\n    return madeChanges;\n  }\n\n  cache.set(realKey, newRealValue);\n  return true;\n}\n\nfunction isDataProcessed(dataId, field, processedData) {\n  if (!processedData) {\n    return false;\n  }\n\n  if (processedData[dataId]) {\n    if (processedData[dataId].indexOf(field) >= 0) {\n      return true;\n    } else {\n      processedData[dataId].push(field);\n    }\n  } else {\n    processedData[dataId] = [field];\n  }\n\n  return false;\n}\n\nvar defaultConfig = {\n  fragmentMatcher: new HeuristicFragmentMatcher(),\n  dataIdFromObject: defaultDataIdFromObject,\n  addTypename: true,\n  resultCaching: true,\n  freezeResults: false\n};\n\nfunction defaultDataIdFromObject(result) {\n  if (result.__typename) {\n    if (result.id !== undefined) {\n      return result.__typename + \":\" + result.id;\n    }\n\n    if (result._id !== undefined) {\n      return result.__typename + \":\" + result._id;\n    }\n  }\n\n  return null;\n}\n\nvar hasOwn$1 = Object.prototype.hasOwnProperty;\n\nvar OptimisticCacheLayer = function (_super) {\n  __extends(OptimisticCacheLayer, _super);\n\n  function OptimisticCacheLayer(optimisticId, parent, transaction) {\n    var _this = _super.call(this, Object.create(null)) || this;\n\n    _this.optimisticId = optimisticId;\n    _this.parent = parent;\n    _this.transaction = transaction;\n    return _this;\n  }\n\n  OptimisticCacheLayer.prototype.toObject = function () {\n    return __assign(__assign({}, this.parent.toObject()), this.data);\n  };\n\n  OptimisticCacheLayer.prototype.get = function (dataId) {\n    return hasOwn$1.call(this.data, dataId) ? this.data[dataId] : this.parent.get(dataId);\n  };\n\n  return OptimisticCacheLayer;\n}(ObjectCache);\n\nvar InMemoryCache = function (_super) {\n  __extends(InMemoryCache, _super);\n\n  function InMemoryCache(config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.watches = new Set();\n    _this.typenameDocumentCache = new Map();\n    _this.cacheKeyRoot = new KeyTrie(canUseWeakMap);\n    _this.silenceBroadcast = false;\n    _this.config = __assign(__assign({}, defaultConfig), config);\n\n    if (_this.config.customResolvers) {\n      process.env.NODE_ENV === \"production\" || invariant.warn('customResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating customResolvers in the next major version.');\n      _this.config.cacheRedirects = _this.config.customResolvers;\n    }\n\n    if (_this.config.cacheResolvers) {\n      process.env.NODE_ENV === \"production\" || invariant.warn('cacheResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating cacheResolvers in the next major version.');\n      _this.config.cacheRedirects = _this.config.cacheResolvers;\n    }\n\n    _this.addTypename = !!_this.config.addTypename;\n    _this.data = _this.config.resultCaching ? new DepTrackingCache() : new ObjectCache();\n    _this.optimisticData = _this.data;\n    _this.storeWriter = new StoreWriter();\n    _this.storeReader = new StoreReader({\n      cacheKeyRoot: _this.cacheKeyRoot,\n      freezeResults: config.freezeResults\n    });\n    var cache = _this;\n    var maybeBroadcastWatch = cache.maybeBroadcastWatch;\n    _this.maybeBroadcastWatch = wrap(function (c) {\n      return maybeBroadcastWatch.call(_this, c);\n    }, {\n      makeCacheKey: function (c) {\n        if (c.optimistic) {\n          return;\n        }\n\n        if (c.previousResult) {\n          return;\n        }\n\n        if (cache.data instanceof DepTrackingCache) {\n          return cache.cacheKeyRoot.lookup(c.query, JSON.stringify(c.variables));\n        }\n      }\n    });\n    return _this;\n  }\n\n  InMemoryCache.prototype.restore = function (data) {\n    if (data) this.data.replace(data);\n    return this;\n  };\n\n  InMemoryCache.prototype.extract = function (optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n\n    return (optimistic ? this.optimisticData : this.data).toObject();\n  };\n\n  InMemoryCache.prototype.read = function (options) {\n    if (typeof options.rootId === 'string' && typeof this.data.get(options.rootId) === 'undefined') {\n      return null;\n    }\n\n    var fragmentMatcher = this.config.fragmentMatcher;\n    var fragmentMatcherFunction = fragmentMatcher && fragmentMatcher.match;\n    return this.storeReader.readQueryFromStore({\n      store: options.optimistic ? this.optimisticData : this.data,\n      query: this.transformDocument(options.query),\n      variables: options.variables,\n      rootId: options.rootId,\n      fragmentMatcherFunction: fragmentMatcherFunction,\n      previousResult: options.previousResult,\n      config: this.config\n    }) || null;\n  };\n\n  InMemoryCache.prototype.write = function (write) {\n    var fragmentMatcher = this.config.fragmentMatcher;\n    var fragmentMatcherFunction = fragmentMatcher && fragmentMatcher.match;\n    this.storeWriter.writeResultToStore({\n      dataId: write.dataId,\n      result: write.result,\n      variables: write.variables,\n      document: this.transformDocument(write.query),\n      store: this.data,\n      dataIdFromObject: this.config.dataIdFromObject,\n      fragmentMatcherFunction: fragmentMatcherFunction\n    });\n    this.broadcastWatches();\n  };\n\n  InMemoryCache.prototype.diff = function (query) {\n    var fragmentMatcher = this.config.fragmentMatcher;\n    var fragmentMatcherFunction = fragmentMatcher && fragmentMatcher.match;\n    return this.storeReader.diffQueryAgainstStore({\n      store: query.optimistic ? this.optimisticData : this.data,\n      query: this.transformDocument(query.query),\n      variables: query.variables,\n      returnPartialData: query.returnPartialData,\n      previousResult: query.previousResult,\n      fragmentMatcherFunction: fragmentMatcherFunction,\n      config: this.config\n    });\n  };\n\n  InMemoryCache.prototype.watch = function (watch) {\n    var _this = this;\n\n    this.watches.add(watch);\n    return function () {\n      _this.watches.delete(watch);\n    };\n  };\n\n  InMemoryCache.prototype.evict = function (query) {\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(7) : new InvariantError(\"eviction is not implemented on InMemory Cache\");\n  };\n\n  InMemoryCache.prototype.reset = function () {\n    this.data.clear();\n    this.broadcastWatches();\n    return Promise.resolve();\n  };\n\n  InMemoryCache.prototype.removeOptimistic = function (idToRemove) {\n    var toReapply = [];\n    var removedCount = 0;\n    var layer = this.optimisticData;\n\n    while (layer instanceof OptimisticCacheLayer) {\n      if (layer.optimisticId === idToRemove) {\n        ++removedCount;\n      } else {\n        toReapply.push(layer);\n      }\n\n      layer = layer.parent;\n    }\n\n    if (removedCount > 0) {\n      this.optimisticData = layer;\n\n      while (toReapply.length > 0) {\n        var layer_1 = toReapply.pop();\n        this.performTransaction(layer_1.transaction, layer_1.optimisticId);\n      }\n\n      this.broadcastWatches();\n    }\n  };\n\n  InMemoryCache.prototype.performTransaction = function (transaction, optimisticId) {\n    var _a = this,\n        data = _a.data,\n        silenceBroadcast = _a.silenceBroadcast;\n\n    this.silenceBroadcast = true;\n\n    if (typeof optimisticId === 'string') {\n      this.data = this.optimisticData = new OptimisticCacheLayer(optimisticId, this.optimisticData, transaction);\n    }\n\n    try {\n      transaction(this);\n    } finally {\n      this.silenceBroadcast = silenceBroadcast;\n      this.data = data;\n    }\n\n    this.broadcastWatches();\n  };\n\n  InMemoryCache.prototype.recordOptimisticTransaction = function (transaction, id) {\n    return this.performTransaction(transaction, id);\n  };\n\n  InMemoryCache.prototype.transformDocument = function (document) {\n    if (this.addTypename) {\n      var result = this.typenameDocumentCache.get(document);\n\n      if (!result) {\n        result = addTypenameToDocument(document);\n        this.typenameDocumentCache.set(document, result);\n        this.typenameDocumentCache.set(result, result);\n      }\n\n      return result;\n    }\n\n    return document;\n  };\n\n  InMemoryCache.prototype.broadcastWatches = function () {\n    var _this = this;\n\n    if (!this.silenceBroadcast) {\n      this.watches.forEach(function (c) {\n        return _this.maybeBroadcastWatch(c);\n      });\n    }\n  };\n\n  InMemoryCache.prototype.maybeBroadcastWatch = function (c) {\n    c.callback(this.diff({\n      query: c.query,\n      variables: c.variables,\n      previousResult: c.previousResult && c.previousResult(),\n      optimistic: c.optimistic\n    }));\n  };\n\n  return InMemoryCache;\n}(ApolloCache);\n\nexport { HeuristicFragmentMatcher, InMemoryCache, IntrospectionFragmentMatcher, ObjectCache, StoreReader, StoreWriter, WriteError, assertIdValue, defaultDataIdFromObject, defaultNormalizedCacheFactory$1 as defaultNormalizedCacheFactory, enhanceErrorWithDocument };","map":{"version":3,"mappings":"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","names":["haveWarned","shouldWarn","answer","isTest","HeuristicFragmentMatcher","Promise","resolve","idValue","typeCondition","context","obj","store","get","id","isRootQuery","__typename","process","options","introspectionQueryResultData","possibleTypesMap","parseIntrospectionResult","isReady","match","bind","IntrospectionFragmentMatcher","invariant","implementingTypes","indexOf","introspectionResultData","typeMap","__schema","types","forEach","type","kind","name","possibleTypes","map","hasOwn","Object","prototype","hasOwnProperty","data","create","depend","wrap","dataId","disposable","makeCacheKey","DepTrackingCache","value","oldValue","dirty","call","replace","newData","keys","_this","set","delete","defaultNormalizedCacheFactory","seed","_a","_b","_c","cacheKeyRoot","_d","freezeResults","executeStoreQuery","executeSelectionSet","executeSubSelectedArray","query","rootValue","contextValue","variableValues","fragmentMatcher","lookup","JSON","stringify","selectionSet","execContext","field","array","StoreReader","diffQueryAgainstStore","__assign","returnPartialData","result","variables","previousResult","rootId","fragmentMatcherFunction","config","queryDefinition","getQueryDefinition","assign","getDefaultValues","dataIdFromObject","cacheRedirects","execResult","generated","typename","hasMissingFields","missing","length","info","tolerable","fieldName","isEqual","complete","mainDefinition","getMainDefinition","fragments","getFragmentDefinitions","fragmentMap","createFragmentMap","finalResult","objectsToMerge","object","handleMissing","push","apply","selections","shouldInclude","selection","isField","fieldResult","executeField","resultKeyNameFromField","fragment","isInlineFragment","fragmentExecResult","mergeDeepArray","env","NODE_ENV","freeze","args","argumentsObjectFromField","resultKey","directives","getDirectiveInfoFromField","readStoreResult","readStoreResolver","Array","isArray","combineExecResults","assertSelectionSetForIdValue","maybeDeepFreeze","execResults","pop","childResult","item","isIdValue","defaultFragmentMatcher","assertIdValue","storeKeyName","getStoreKeyName","fieldValue","resolver","getCacheKey","storeObj","toIdValue","isJsonValue","json","ObjectCache","__extends","Error","enhanceErrorWithDocument","error","document","enhancedError","WriteError","message","stack","StoreWriter","writeResultToStore","operationDefinition","getOperationDefinition","writeSelectionSetToStore","processedData","e","resultFieldKey","writeFieldToStore","isDefered","isClient","some","directive","substring","matches","undefined","fakeContext","isProduction","storeValue","storeObject","storeFieldName","storeKeyNameFromField","generatedId","processArrayValue","valueDataId","isGeneratedId","semanticId","isDataProcessed","escapedId","hadTypename","hasTypename","typenameChanged","mergeWithGenerated","index","itemDataId","generatedKey","realKey","cache","real","madeChanges","key","realValue","newRealValue","defaultConfig","defaultDataIdFromObject","addTypename","resultCaching","_id","optimisticId","parent","transaction","_super","OptimisticCacheLayer","toObject","Set","Map","KeyTrie","canUseWeakMap","customResolvers","cacheResolvers","optimisticData","storeWriter","storeReader","maybeBroadcastWatch","c","optimistic","InMemoryCache","readQueryFromStore","transformDocument","write","broadcastWatches","watch","watches","add","InvariantError","clear","idToRemove","toReapply","removedCount","layer","layer_1","performTransaction","silenceBroadcast","typenameDocumentCache","addTypenameToDocument","callback","diff","ApolloCache"],"sources":["../src/fragmentMatcher.ts","../src/depTrackingCache.ts","../src/readFromStore.ts","../src/objectCache.ts","../src/writeToStore.ts","../src/inMemoryCache.ts"],"sourcesContent":["import { isTest, IdValue } from 'apollo-utilities';\nimport { invariant } from 'ts-invariant';\n\nimport {\n  ReadStoreContext,\n  FragmentMatcherInterface,\n  PossibleTypesMap,\n  IntrospectionResultData,\n} from './types';\n\nlet haveWarned = false;\n\nfunction shouldWarn() {\n  const answer = !haveWarned;\n  /* istanbul ignore if */\n  if (!isTest()) {\n    haveWarned = true;\n  }\n  return answer;\n}\n\n/**\n * This fragment matcher is very basic and unable to match union or interface type conditions\n */\nexport class HeuristicFragmentMatcher implements FragmentMatcherInterface {\n  constructor() {\n    // do nothing\n  }\n\n  public ensureReady() {\n    return Promise.resolve();\n  }\n\n  public canBypassInit() {\n    return true; // we don't need to initialize this fragment matcher.\n  }\n\n  public match(\n    idValue: IdValue,\n    typeCondition: string,\n    context: ReadStoreContext,\n  ): boolean | 'heuristic' {\n    const obj = context.store.get(idValue.id);\n    const isRootQuery = idValue.id === 'ROOT_QUERY';\n\n    if (!obj) {\n      // https://github.com/apollographql/apollo-client/pull/3507\n      return isRootQuery;\n    }\n\n    const { __typename = isRootQuery && 'Query' } = obj;\n\n    if (!__typename) {\n      if (shouldWarn()) {\n        invariant.warn(`You're using fragments in your queries, but either don't have the addTypename:\n  true option set in Apollo Client, or you are trying to write a fragment to the store without the __typename.\n   Please turn on the addTypename option and include __typename when writing fragments so that Apollo Client\n   can accurately match fragments.`);\n        invariant.warn(\n          'Could not find __typename on Fragment ',\n          typeCondition,\n          obj,\n        );\n        invariant.warn(\n          `DEPRECATION WARNING: using fragments without __typename is unsupported behavior ` +\n            `and will be removed in future versions of Apollo client. You should fix this and set addTypename to true now.`,\n        );\n      }\n\n      return 'heuristic';\n    }\n\n    if (__typename === typeCondition) {\n      return true;\n    }\n\n    // At this point we don't know if this fragment should match or not. It's\n    // either:\n    //\n    // 1. (GOOD) A fragment on a matching interface or union.\n    // 2. (BAD) A fragment on a non-matching concrete type or interface or union.\n    //\n    // If it's 2, we don't want it to match. If it's 1, we want it to match. We\n    // can't tell the difference, so we warn the user, but still try to match\n    // it (for backwards compatibility reasons). This unfortunately means that\n    // using the `HeuristicFragmentMatcher` with unions and interfaces is\n    // very unreliable. This will be addressed in a future major version of\n    // Apollo Client, but for now the recommendation is to use the\n    // `IntrospectionFragmentMatcher` when working with unions/interfaces.\n\n    if (shouldWarn()) {\n      invariant.error(\n        'You are using the simple (heuristic) fragment matcher, but your ' +\n          'queries contain union or interface types. Apollo Client will not be ' +\n          'able to accurately map fragments. To make this error go away, use ' +\n          'the `IntrospectionFragmentMatcher` as described in the docs: ' +\n          'https://www.apollographql.com/docs/react/advanced/fragments.html#fragment-matcher',\n      );\n    }\n\n    return 'heuristic';\n  }\n}\n\nexport class IntrospectionFragmentMatcher implements FragmentMatcherInterface {\n  private isReady: boolean;\n  private possibleTypesMap: PossibleTypesMap;\n\n  constructor(options?: {\n    introspectionQueryResultData?: IntrospectionResultData;\n  }) {\n    if (options && options.introspectionQueryResultData) {\n      this.possibleTypesMap = this.parseIntrospectionResult(\n        options.introspectionQueryResultData,\n      );\n      this.isReady = true;\n    } else {\n      this.isReady = false;\n    }\n\n    this.match = this.match.bind(this);\n  }\n\n  public match(\n    idValue: IdValue,\n    typeCondition: string,\n    context: ReadStoreContext,\n  ) {\n    invariant(\n      this.isReady,\n      'FragmentMatcher.match() was called before FragmentMatcher.init()',\n    );\n\n    const obj = context.store.get(idValue.id);\n    const isRootQuery = idValue.id === 'ROOT_QUERY';\n\n    if (!obj) {\n      // https://github.com/apollographql/apollo-client/pull/4620\n      return isRootQuery;\n    }\n\n    const { __typename = isRootQuery && 'Query' } = obj;\n\n    invariant(\n      __typename,\n      `Cannot match fragment because __typename property is missing: ${JSON.stringify(\n        obj,\n      )}`,\n    );\n\n    if (__typename === typeCondition) {\n      return true;\n    }\n\n    const implementingTypes = this.possibleTypesMap[typeCondition];\n    if (\n      __typename &&\n      implementingTypes &&\n      implementingTypes.indexOf(__typename) > -1\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  private parseIntrospectionResult(\n    introspectionResultData: IntrospectionResultData,\n  ): PossibleTypesMap {\n    const typeMap: PossibleTypesMap = {};\n    introspectionResultData.__schema.types.forEach(type => {\n      if (type.kind === 'UNION' || type.kind === 'INTERFACE') {\n        typeMap[type.name] = type.possibleTypes.map(\n          implementingType => implementingType.name,\n        );\n      }\n    });\n    return typeMap;\n  }\n}\n","import { NormalizedCache, NormalizedCacheObject, StoreObject } from './types';\nimport { wrap, OptimisticWrapperFunction } from 'optimism';\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nexport class DepTrackingCache implements NormalizedCache {\n  // Wrapper function produced by the optimism library, used to depend on\n  // dataId strings, for easy invalidation of specific IDs.\n  private depend: OptimisticWrapperFunction<[string], StoreObject | undefined>;\n\n  constructor(private data: NormalizedCacheObject = Object.create(null)) {\n    this.depend = wrap((dataId: string) => this.data[dataId], {\n      disposable: true,\n      makeCacheKey(dataId: string) {\n        return dataId;\n      },\n    });\n  }\n\n  public toObject(): NormalizedCacheObject {\n    return this.data;\n  }\n\n  public get(dataId: string): StoreObject {\n    this.depend(dataId);\n    return this.data[dataId]!;\n  }\n\n  public set(dataId: string, value?: StoreObject) {\n    const oldValue = this.data[dataId];\n    if (value !== oldValue) {\n      this.data[dataId] = value;\n      this.depend.dirty(dataId);\n    }\n  }\n\n  public delete(dataId: string): void {\n    if (hasOwn.call(this.data, dataId)) {\n      delete this.data[dataId];\n      this.depend.dirty(dataId);\n    }\n  }\n\n  public clear(): void {\n    this.replace(null);\n  }\n\n  public replace(newData: NormalizedCacheObject | null): void {\n    if (newData) {\n      Object.keys(newData).forEach(dataId => {\n        this.set(dataId, newData[dataId]);\n      });\n      Object.keys(this.data).forEach(dataId => {\n        if (!hasOwn.call(newData, dataId)) {\n          this.delete(dataId);\n        }\n      });\n    } else {\n      Object.keys(this.data).forEach(dataId => {\n        this.delete(dataId);\n      });\n    }\n  }\n}\n\nexport function defaultNormalizedCacheFactory(\n  seed?: NormalizedCacheObject,\n): NormalizedCache {\n  return new DepTrackingCache(seed);\n}\n","import {\n  argumentsObjectFromField,\n  assign,\n  canUseWeakMap,\n  createFragmentMap,\n  DirectiveInfo,\n  FragmentMap,\n  getDefaultValues,\n  getDirectiveInfoFromField,\n  getFragmentDefinitions,\n  getMainDefinition,\n  getQueryDefinition,\n  getStoreKeyName,\n  IdValue,\n  isEqual,\n  isField,\n  isIdValue,\n  isInlineFragment,\n  isJsonValue,\n  maybeDeepFreeze,\n  mergeDeepArray,\n  resultKeyNameFromField,\n  shouldInclude,\n  StoreValue,\n  toIdValue,\n} from 'apollo-utilities';\n\nimport { Cache } from 'apollo-cache';\n\nimport {\n  ReadStoreContext,\n  DiffQueryAgainstStoreOptions,\n  ReadQueryOptions,\n  StoreObject,\n} from './types';\n\nimport {\n  DocumentNode,\n  FieldNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n  SelectionSetNode,\n} from 'graphql';\n\nimport { wrap, KeyTrie } from 'optimism';\nimport { DepTrackingCache } from './depTrackingCache';\nimport { invariant, InvariantError } from 'ts-invariant';\n\nexport type VariableMap = { [name: string]: any };\n\nexport type FragmentMatcher = (\n  rootValue: any,\n  typeCondition: string,\n  context: ReadStoreContext,\n) => boolean | 'heuristic';\n\ntype ExecContext = {\n  query: DocumentNode;\n  fragmentMap: FragmentMap;\n  contextValue: ReadStoreContext;\n  variableValues: VariableMap;\n  fragmentMatcher: FragmentMatcher;\n};\n\ntype ExecInfo = {\n  resultKey: string;\n  directives: DirectiveInfo;\n};\n\nexport type ExecResultMissingField = {\n  object: StoreObject;\n  fieldName: string;\n  tolerable: boolean;\n};\n\nexport type ExecResult<R = any> = {\n  result: R;\n  // Empty array if no missing fields encountered while computing result.\n  missing?: ExecResultMissingField[];\n};\n\ntype ExecStoreQueryOptions = {\n  query: DocumentNode;\n  rootValue: IdValue;\n  contextValue: ReadStoreContext;\n  variableValues: VariableMap;\n  // Default matcher always matches all fragments\n  fragmentMatcher?: FragmentMatcher;\n};\n\ntype ExecSelectionSetOptions = {\n  selectionSet: SelectionSetNode;\n  rootValue: any;\n  execContext: ExecContext;\n};\n\ntype ExecSubSelectedArrayOptions = {\n  field: FieldNode;\n  array: any[];\n  execContext: ExecContext;\n};\n\nexport interface StoreReaderConfig {\n  cacheKeyRoot?: KeyTrie<object>;\n  freezeResults?: boolean;\n}\n\nexport class StoreReader {\n  private freezeResults: boolean;\n\n  constructor({\n    cacheKeyRoot = new KeyTrie<object>(canUseWeakMap),\n    freezeResults = false,\n  }: StoreReaderConfig = {}) {\n    const {\n      executeStoreQuery,\n      executeSelectionSet,\n      executeSubSelectedArray,\n    } = this;\n\n    this.freezeResults = freezeResults;\n\n    this.executeStoreQuery = wrap((options: ExecStoreQueryOptions) => {\n      return executeStoreQuery.call(this, options);\n    }, {\n      makeCacheKey({\n        query,\n        rootValue,\n        contextValue,\n        variableValues,\n        fragmentMatcher,\n      }: ExecStoreQueryOptions) {\n        // The result of executeStoreQuery can be safely cached only if the\n        // underlying store is capable of tracking dependencies and invalidating\n        // the cache when relevant data have changed.\n        if (contextValue.store instanceof DepTrackingCache) {\n          return cacheKeyRoot.lookup(\n            contextValue.store,\n            query,\n            fragmentMatcher,\n            JSON.stringify(variableValues),\n            rootValue.id,\n          );\n        }\n      }\n    });\n\n    this.executeSelectionSet = wrap((options: ExecSelectionSetOptions) => {\n      return executeSelectionSet.call(this, options);\n    }, {\n      makeCacheKey({\n        selectionSet,\n        rootValue,\n        execContext,\n      }: ExecSelectionSetOptions) {\n        if (execContext.contextValue.store instanceof DepTrackingCache) {\n          return cacheKeyRoot.lookup(\n            execContext.contextValue.store,\n            selectionSet,\n            execContext.fragmentMatcher,\n            JSON.stringify(execContext.variableValues),\n            rootValue.id,\n          );\n        }\n      }\n    });\n\n    this.executeSubSelectedArray = wrap((options: ExecSubSelectedArrayOptions) => {\n      return executeSubSelectedArray.call(this, options);\n    }, {\n      makeCacheKey({ field, array, execContext }) {\n        if (execContext.contextValue.store instanceof DepTrackingCache) {\n          return cacheKeyRoot.lookup(\n            execContext.contextValue.store,\n            field,\n            array,\n            JSON.stringify(execContext.variableValues),\n          );\n        }\n      }\n    });\n  }\n\n  /**\n   * Resolves the result of a query solely from the store (i.e. never hits the server).\n   *\n   * @param {Store} store The {@link NormalizedCache} used by Apollo for the `data` portion of the\n   * store.\n   *\n   * @param {DocumentNode} query The query document to resolve from the data available in the store.\n   *\n   * @param {Object} [variables] A map from the name of a variable to its value. These variables can\n   * be referenced by the query document.\n   *\n   * @param {any} previousResult The previous result returned by this function for the same query.\n   * If nothing in the store changed since that previous result then values from the previous result\n   * will be returned to preserve referential equality.\n   */\n  public readQueryFromStore<QueryType>(\n    options: ReadQueryOptions,\n  ): QueryType | undefined {\n    return this.diffQueryAgainstStore<QueryType>({\n      ...options,\n      returnPartialData: false,\n    }).result;\n  }\n\n  /**\n   * Given a store and a query, return as much of the result as possible and\n   * identify if any data was missing from the store.\n   * @param  {DocumentNode} query A parsed GraphQL query document\n   * @param  {Store} store The Apollo Client store object\n   * @param  {any} previousResult The previous result returned by this function for the same query\n   * @return {result: Object, complete: [boolean]}\n   */\n  public diffQueryAgainstStore<T>({\n    store,\n    query,\n    variables,\n    previousResult,\n    returnPartialData = true,\n    rootId = 'ROOT_QUERY',\n    fragmentMatcherFunction,\n    config,\n  }: DiffQueryAgainstStoreOptions): Cache.DiffResult<T> {\n    // Throw the right validation error by trying to find a query in the document\n    const queryDefinition = getQueryDefinition(query);\n\n    variables = assign({}, getDefaultValues(queryDefinition), variables);\n\n    const context: ReadStoreContext = {\n      // Global settings\n      store,\n      dataIdFromObject: config && config.dataIdFromObject,\n      cacheRedirects: (config && config.cacheRedirects) || {},\n    };\n\n    const execResult = this.executeStoreQuery({\n      query,\n      rootValue: {\n        type: 'id',\n        id: rootId,\n        generated: true,\n        typename: 'Query',\n      },\n      contextValue: context,\n      variableValues: variables,\n      fragmentMatcher: fragmentMatcherFunction,\n    });\n\n    const hasMissingFields =\n      execResult.missing && execResult.missing.length > 0;\n\n    if (hasMissingFields && ! returnPartialData) {\n      execResult.missing!.forEach(info => {\n        if (info.tolerable) return;\n        throw new InvariantError(\n          `Can't find field ${info.fieldName} on object ${JSON.stringify(\n            info.object,\n            null,\n            2,\n          )}.`,\n        );\n      });\n    }\n\n    if (previousResult) {\n      if (isEqual(previousResult, execResult.result)) {\n        execResult.result = previousResult;\n      }\n    }\n\n    return {\n      result: execResult.result,\n      complete: !hasMissingFields,\n    };\n  }\n\n  /**\n   * Based on graphql function from graphql-js:\n   *\n   * graphql(\n   *   schema: GraphQLSchema,\n   *   requestString: string,\n   *   rootValue?: ?any,\n   *   contextValue?: ?any,\n   *   variableValues?: ?{[key: string]: any},\n   *   operationName?: ?string\n   * ): Promise<GraphQLResult>\n   *\n   * The default export as of graphql-anywhere is sync as of 4.0,\n   * but below is an exported alternative that is async.\n   * In the 5.0 version, this will be the only export again\n   * and it will be async\n   *\n   */\n  private executeStoreQuery({\n    query,\n    rootValue,\n    contextValue,\n    variableValues,\n    // Default matcher always matches all fragments\n    fragmentMatcher = defaultFragmentMatcher,\n  }: ExecStoreQueryOptions): ExecResult {\n    const mainDefinition = getMainDefinition(query);\n    const fragments = getFragmentDefinitions(query);\n    const fragmentMap = createFragmentMap(fragments);\n    const execContext: ExecContext = {\n      query,\n      fragmentMap,\n      contextValue,\n      variableValues,\n      fragmentMatcher,\n    };\n\n    return this.executeSelectionSet({\n      selectionSet: mainDefinition.selectionSet,\n      rootValue,\n      execContext,\n    });\n  }\n\n  private executeSelectionSet({\n    selectionSet,\n    rootValue,\n    execContext,\n  }: ExecSelectionSetOptions): ExecResult {\n    const { fragmentMap, contextValue, variableValues: variables } = execContext;\n    const finalResult: ExecResult = { result: null };\n\n    const objectsToMerge: { [key: string]: any }[] = [];\n\n    const object: StoreObject = contextValue.store.get(rootValue.id);\n\n    const typename =\n      (object && object.__typename) ||\n      (rootValue.id === 'ROOT_QUERY' && 'Query') ||\n      void 0;\n\n    function handleMissing<T>(result: ExecResult<T>): T {\n      if (result.missing) {\n        finalResult.missing = finalResult.missing || [];\n        finalResult.missing.push(...result.missing);\n      }\n      return result.result;\n    }\n\n    selectionSet.selections.forEach(selection => {\n      if (!shouldInclude(selection, variables)) {\n        // Skip this entirely\n        return;\n      }\n\n      if (isField(selection)) {\n        const fieldResult = handleMissing(\n          this.executeField(object, typename, selection, execContext),\n        );\n\n        if (typeof fieldResult !== 'undefined') {\n          objectsToMerge.push({\n            [resultKeyNameFromField(selection)]: fieldResult,\n          });\n        }\n\n      } else {\n        let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n        if (isInlineFragment(selection)) {\n          fragment = selection;\n        } else {\n          // This is a named fragment\n          fragment = fragmentMap[selection.name.value];\n\n          if (!fragment) {\n            throw new InvariantError(`No fragment named ${selection.name.value}`);\n          }\n        }\n\n        const typeCondition =\n          fragment.typeCondition && fragment.typeCondition.name.value;\n\n        const match =\n          !typeCondition ||\n          execContext.fragmentMatcher(rootValue, typeCondition, contextValue);\n\n        if (match) {\n          let fragmentExecResult = this.executeSelectionSet({\n            selectionSet: fragment.selectionSet,\n            rootValue,\n            execContext,\n          });\n\n          if (match === 'heuristic' && fragmentExecResult.missing) {\n            fragmentExecResult = {\n              ...fragmentExecResult,\n              missing: fragmentExecResult.missing.map(info => {\n                return { ...info, tolerable: true };\n              }),\n            };\n          }\n\n          objectsToMerge.push(handleMissing(fragmentExecResult));\n        }\n      }\n    });\n\n    // Perform a single merge at the end so that we can avoid making more\n    // defensive shallow copies than necessary.\n    finalResult.result = mergeDeepArray(objectsToMerge);\n\n    if (this.freezeResults && process.env.NODE_ENV !== 'production') {\n      Object.freeze(finalResult.result);\n    }\n\n    return finalResult;\n  }\n\n  private executeField(\n    object: StoreObject,\n    typename: string | void,\n    field: FieldNode,\n    execContext: ExecContext,\n  ): ExecResult {\n    const { variableValues: variables, contextValue } = execContext;\n    const fieldName = field.name.value;\n    const args = argumentsObjectFromField(field, variables);\n\n    const info: ExecInfo = {\n      resultKey: resultKeyNameFromField(field),\n      directives: getDirectiveInfoFromField(field, variables),\n    };\n\n    const readStoreResult = readStoreResolver(\n      object,\n      typename,\n      fieldName,\n      args,\n      contextValue,\n      info,\n    );\n\n    if (Array.isArray(readStoreResult.result)) {\n      return this.combineExecResults(\n        readStoreResult,\n        this.executeSubSelectedArray({\n          field,\n          array: readStoreResult.result,\n          execContext,\n        }),\n      );\n    }\n\n    // Handle all scalar types here\n    if (!field.selectionSet) {\n      assertSelectionSetForIdValue(field, readStoreResult.result);\n      if (this.freezeResults && process.env.NODE_ENV !== 'production') {\n        maybeDeepFreeze(readStoreResult);\n      }\n      return readStoreResult;\n    }\n\n    // From here down, the field has a selection set, which means it's trying to\n    // query a GraphQLObjectType\n    if (readStoreResult.result == null) {\n      // Basically any field in a GraphQL response can be null, or missing\n      return readStoreResult;\n    }\n\n    // Returned value is an object, and the query has a sub-selection. Recurse.\n    return this.combineExecResults(\n      readStoreResult,\n      this.executeSelectionSet({\n        selectionSet: field.selectionSet,\n        rootValue: readStoreResult.result,\n        execContext,\n      }),\n    );\n  }\n\n  private combineExecResults<T>(\n    ...execResults: ExecResult<T>[]\n  ): ExecResult<T> {\n    let missing: ExecResultMissingField[] | undefined;\n    execResults.forEach(execResult => {\n      if (execResult.missing) {\n        missing = missing || [];\n        missing.push(...execResult.missing);\n      }\n    });\n    return {\n      result: execResults.pop()!.result,\n      missing,\n    };\n  }\n\n  private executeSubSelectedArray({\n    field,\n    array,\n    execContext,\n  }: ExecSubSelectedArrayOptions): ExecResult {\n    let missing: ExecResultMissingField[] | undefined;\n\n    function handleMissing<T>(childResult: ExecResult<T>): T {\n      if (childResult.missing) {\n        missing = missing || [];\n        missing.push(...childResult.missing);\n      }\n\n      return childResult.result;\n    }\n\n    array = array.map(item => {\n      // null value in array\n      if (item === null) {\n        return null;\n      }\n\n      // This is a nested array, recurse\n      if (Array.isArray(item)) {\n        return handleMissing(this.executeSubSelectedArray({\n          field,\n          array: item,\n          execContext,\n        }));\n      }\n\n      // This is an object, run the selection set on it\n      if (field.selectionSet) {\n        return handleMissing(this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          rootValue: item,\n          execContext,\n        }));\n      }\n\n      assertSelectionSetForIdValue(field, item);\n\n      return item;\n    });\n\n    if (this.freezeResults && process.env.NODE_ENV !== 'production') {\n      Object.freeze(array);\n    }\n\n    return { result: array, missing };\n  }\n}\n\nfunction assertSelectionSetForIdValue(\n  field: FieldNode,\n  value: any,\n) {\n  if (!field.selectionSet && isIdValue(value)) {\n    throw new InvariantError(\n      `Missing selection set for object of type ${\n        value.typename\n      } returned for query field ${field.name.value}`\n    );\n  }\n}\n\nfunction defaultFragmentMatcher() {\n  return true;\n}\n\nexport function assertIdValue(idValue: IdValue) {\n  invariant(isIdValue(idValue), `\\\nEncountered a sub-selection on the query, but the store doesn't have \\\nan object reference. This should never happen during normal use unless you have custom code \\\nthat is directly manipulating the store; please file an issue.`);\n}\n\nfunction readStoreResolver(\n  object: StoreObject,\n  typename: string | void,\n  fieldName: string,\n  args: any,\n  context: ReadStoreContext,\n  { resultKey, directives }: ExecInfo,\n): ExecResult<StoreValue> {\n  let storeKeyName = fieldName;\n  if (args || directives) {\n    // We happen to know here that getStoreKeyName returns its first\n    // argument unmodified if there are no args or directives, so we can\n    // avoid calling the function at all in that case, as a small but\n    // important optimization to this frequently executed code.\n    storeKeyName = getStoreKeyName(storeKeyName, args, directives);\n  }\n\n  let fieldValue: StoreValue | void = void 0;\n\n  if (object) {\n    fieldValue = object[storeKeyName];\n\n    if (\n      typeof fieldValue === 'undefined' &&\n      context.cacheRedirects &&\n      typeof typename === 'string'\n    ) {\n      // Look for the type in the custom resolver map\n      const type = context.cacheRedirects[typename];\n      if (type) {\n        // Look for the field in the custom resolver map\n        const resolver = type[fieldName];\n        if (resolver) {\n          fieldValue = resolver(object, args, {\n            getCacheKey(storeObj: StoreObject) {\n              const id = context.dataIdFromObject!(storeObj);\n              return id && toIdValue({\n                id,\n                typename: storeObj.__typename,\n              });\n            },\n          });\n        }\n      }\n    }\n  }\n\n  if (typeof fieldValue === 'undefined') {\n    return {\n      result: fieldValue,\n      missing: [{\n        object,\n        fieldName: storeKeyName,\n        tolerable: false,\n      }],\n    };\n  }\n\n  if (isJsonValue(fieldValue)) {\n    fieldValue = fieldValue.json;\n  }\n\n  return {\n    result: fieldValue,\n  };\n}\n","import { NormalizedCache, NormalizedCacheObject, StoreObject } from './types';\n\nexport class ObjectCache implements NormalizedCache {\n  constructor(protected data: NormalizedCacheObject = Object.create(null)) {}\n\n  public toObject() {\n    return this.data;\n  }\n\n  public get(dataId: string) {\n    return this.data[dataId]!;\n  }\n\n  public set(dataId: string, value: StoreObject) {\n    this.data[dataId] = value;\n  }\n\n  public delete(dataId: string) {\n    this.data[dataId] = void 0;\n  }\n\n  public clear() {\n    this.data = Object.create(null);\n  }\n\n  public replace(newData: NormalizedCacheObject) {\n    this.data = newData || Object.create(null);\n  }\n}\n\nexport function defaultNormalizedCacheFactory(\n  seed?: NormalizedCacheObject,\n): NormalizedCache {\n  return new ObjectCache(seed);\n}\n","import {\n  SelectionSetNode,\n  FieldNode,\n  DocumentNode,\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n} from 'graphql';\nimport { FragmentMatcher } from './readFromStore';\n\nimport {\n  assign,\n  createFragmentMap,\n  FragmentMap,\n  getDefaultValues,\n  getFragmentDefinitions,\n  getOperationDefinition,\n  IdValue,\n  isField,\n  isIdValue,\n  isInlineFragment,\n  isProduction,\n  resultKeyNameFromField,\n  shouldInclude,\n  storeKeyNameFromField,\n  StoreValue,\n  toIdValue,\n  isEqual,\n} from 'apollo-utilities';\n\nimport { invariant } from 'ts-invariant';\n\nimport { ObjectCache } from './objectCache';\nimport { defaultNormalizedCacheFactory } from './depTrackingCache';\n\nimport {\n  IdGetter,\n  NormalizedCache,\n  ReadStoreContext,\n  StoreObject,\n} from './types';\n\nexport class WriteError extends Error {\n  public type = 'WriteError';\n}\n\nexport function enhanceErrorWithDocument(error: Error, document: DocumentNode) {\n  // XXX A bit hacky maybe ...\n  const enhancedError = new WriteError(\n    `Error writing result to store for query:\\n ${JSON.stringify(document)}`,\n  );\n  enhancedError.message += '\\n' + error.message;\n  enhancedError.stack = error.stack;\n  return enhancedError;\n}\n\nexport type WriteContext = {\n  readonly store: NormalizedCache;\n  readonly processedData?: { [x: string]: FieldNode[] };\n  readonly variables?: any;\n  readonly dataIdFromObject?: IdGetter;\n  readonly fragmentMap?: FragmentMap;\n  readonly fragmentMatcherFunction?: FragmentMatcher;\n};\n\nexport class StoreWriter {\n  /**\n   * Writes the result of a query to the store.\n   *\n   * @param result The result object returned for the query document.\n   *\n   * @param query The query document whose result we are writing to the store.\n   *\n   * @param store The {@link NormalizedCache} used by Apollo for the `data` portion of the store.\n   *\n   * @param variables A map from the name of a variable to its value. These variables can be\n   * referenced by the query document.\n   *\n   * @param dataIdFromObject A function that returns an object identifier given a particular result\n   * object. See the store documentation for details and an example of this function.\n   *\n   * @param fragmentMatcherFunction A function to use for matching fragment conditions in GraphQL documents\n   */\n  public writeQueryToStore({\n    query,\n    result,\n    store = defaultNormalizedCacheFactory(),\n    variables,\n    dataIdFromObject,\n    fragmentMatcherFunction,\n  }: {\n    query: DocumentNode;\n    result: Object;\n    store?: NormalizedCache;\n    variables?: Object;\n    dataIdFromObject?: IdGetter;\n    fragmentMatcherFunction?: FragmentMatcher;\n  }): NormalizedCache {\n    return this.writeResultToStore({\n      dataId: 'ROOT_QUERY',\n      result,\n      document: query,\n      store,\n      variables,\n      dataIdFromObject,\n      fragmentMatcherFunction,\n    });\n  }\n\n  public writeResultToStore({\n    dataId,\n    result,\n    document,\n    store = defaultNormalizedCacheFactory(),\n    variables,\n    dataIdFromObject,\n    fragmentMatcherFunction,\n  }: {\n    dataId: string;\n    result: any;\n    document: DocumentNode;\n    store?: NormalizedCache;\n    variables?: Object;\n    dataIdFromObject?: IdGetter;\n    fragmentMatcherFunction?: FragmentMatcher;\n  }): NormalizedCache {\n    // XXX TODO REFACTOR: this is a temporary workaround until query normalization is made to work with documents.\n    const operationDefinition = getOperationDefinition(document)!;\n\n    try {\n      return this.writeSelectionSetToStore({\n        result,\n        dataId,\n        selectionSet: operationDefinition.selectionSet,\n        context: {\n          store,\n          processedData: {},\n          variables: assign(\n            {},\n            getDefaultValues(operationDefinition),\n            variables,\n          ),\n          dataIdFromObject,\n          fragmentMap: createFragmentMap(getFragmentDefinitions(document)),\n          fragmentMatcherFunction,\n        },\n      });\n    } catch (e) {\n      throw enhanceErrorWithDocument(e, document);\n    }\n  }\n\n  public writeSelectionSetToStore({\n    result,\n    dataId,\n    selectionSet,\n    context,\n  }: {\n    dataId: string;\n    result: any;\n    selectionSet: SelectionSetNode;\n    context: WriteContext;\n  }): NormalizedCache {\n    const { variables, store, fragmentMap } = context;\n\n    selectionSet.selections.forEach(selection => {\n      if (!shouldInclude(selection, variables)) {\n        return;\n      }\n\n      if (isField(selection)) {\n        const resultFieldKey: string = resultKeyNameFromField(selection);\n        const value: any = result[resultFieldKey];\n\n        if (typeof value !== 'undefined') {\n          this.writeFieldToStore({\n            dataId,\n            value,\n            field: selection,\n            context,\n          });\n        } else {\n          let isDefered = false;\n          let isClient = false;\n          if (selection.directives && selection.directives.length) {\n            // If this is a defered field we don't need to throw / warn.\n            isDefered = selection.directives.some(\n              directive => directive.name && directive.name.value === 'defer',\n            );\n\n            // When using the @client directive, it might be desirable in\n            // some cases to want to write a selection set to the store,\n            // without having all of the selection set values available.\n            // This is because the @client field values might have already\n            // been written to the cache separately (e.g. via Apollo\n            // Cache's `writeData` capabilities). Because of this, we'll\n            // skip the missing field warning for fields with @client\n            // directives.\n            isClient = selection.directives.some(\n              directive => directive.name && directive.name.value === 'client',\n            );\n          }\n\n          if (!isDefered && !isClient && context.fragmentMatcherFunction) {\n            // XXX We'd like to throw an error, but for backwards compatibility's sake\n            // we just print a warning for the time being.\n            //throw new WriteError(`Missing field ${resultFieldKey} in ${JSON.stringify(result, null, 2).substring(0, 100)}`);\n            invariant.warn(\n              `Missing field ${resultFieldKey} in ${JSON.stringify(\n                result,\n                null,\n                2,\n              ).substring(0, 100)}`,\n            );\n          }\n        }\n      } else {\n        // This is not a field, so it must be a fragment, either inline or named\n        let fragment: InlineFragmentNode | FragmentDefinitionNode;\n\n        if (isInlineFragment(selection)) {\n          fragment = selection;\n        } else {\n          // Named fragment\n          fragment = (fragmentMap || {})[selection.name.value];\n          invariant(fragment, `No fragment named ${selection.name.value}.`);\n        }\n\n        let matches = true;\n        if (context.fragmentMatcherFunction && fragment.typeCondition) {\n          // TODO we need to rewrite the fragment matchers for this to work properly and efficiently\n          // Right now we have to pretend that we're passing in an idValue and that there's a store\n          // on the context.\n          const id = dataId || 'self';\n          const idValue = toIdValue({ id, typename: undefined });\n          const fakeContext: ReadStoreContext = {\n            // NOTE: fakeContext always uses ObjectCache\n            // since this is only to ensure the return value of 'matches'\n            store: new ObjectCache({ [id]: result }),\n            cacheRedirects: {},\n          };\n          const match = context.fragmentMatcherFunction(\n            idValue,\n            fragment.typeCondition.name.value,\n            fakeContext,\n          );\n          if (!isProduction() && match === 'heuristic') {\n            invariant.error('WARNING: heuristic fragment matching going on!');\n          }\n          matches = !!match;\n        }\n\n        if (matches) {\n          this.writeSelectionSetToStore({\n            result,\n            selectionSet: fragment.selectionSet,\n            dataId,\n            context,\n          });\n        }\n      }\n    });\n\n    return store;\n  }\n\n  private writeFieldToStore({\n    field,\n    value,\n    dataId,\n    context,\n  }: {\n    field: FieldNode;\n    value: any;\n    dataId: string;\n    context: WriteContext;\n  }) {\n    const { variables, dataIdFromObject, store } = context;\n\n    let storeValue: StoreValue;\n    let storeObject: StoreObject;\n\n    const storeFieldName: string = storeKeyNameFromField(field, variables);\n\n    // If this is a scalar value...\n    if (!field.selectionSet || value === null) {\n      storeValue =\n        value != null && typeof value === 'object'\n          ? // If the scalar value is a JSON blob, we have to \"escape\" it so it can’t pretend to be\n            // an id.\n            { type: 'json', json: value }\n          : // Otherwise, just store the scalar directly in the store.\n            value;\n    } else if (Array.isArray(value)) {\n      const generatedId = `${dataId}.${storeFieldName}`;\n\n      storeValue = this.processArrayValue(\n        value,\n        generatedId,\n        field.selectionSet,\n        context,\n      );\n    } else {\n      // It's an object\n      let valueDataId = `${dataId}.${storeFieldName}`;\n      let generated = true;\n\n      // We only prepend the '$' if the valueDataId isn't already a generated\n      // id.\n      if (!isGeneratedId(valueDataId)) {\n        valueDataId = '$' + valueDataId;\n      }\n\n      if (dataIdFromObject) {\n        const semanticId = dataIdFromObject(value);\n\n        // We throw an error if the first character of the id is '$. This is\n        // because we use that character to designate an Apollo-generated id\n        // and we use the distinction between user-desiginated and application-provided\n        // ids when managing overwrites.\n        invariant(\n          !semanticId || !isGeneratedId(semanticId),\n          'IDs returned by dataIdFromObject cannot begin with the \"$\" character.',\n        );\n\n        if (\n          semanticId ||\n          (typeof semanticId === 'number' && semanticId === 0)\n        ) {\n          valueDataId = semanticId;\n          generated = false;\n        }\n      }\n\n      if (!isDataProcessed(valueDataId, field, context.processedData)) {\n        this.writeSelectionSetToStore({\n          dataId: valueDataId,\n          result: value,\n          selectionSet: field.selectionSet,\n          context,\n        });\n      }\n\n      // We take the id and escape it (i.e. wrap it with an enclosing object).\n      // This allows us to distinguish IDs from normal scalars.\n      const typename = value.__typename;\n      storeValue = toIdValue({ id: valueDataId, typename }, generated);\n\n      // check if there was a generated id at the location where we're\n      // about to place this new id. If there was, we have to merge the\n      // data from that id with the data we're about to write in the store.\n      storeObject = store.get(dataId);\n      const escapedId =\n        storeObject && (storeObject[storeFieldName] as IdValue | undefined);\n      if (escapedId !== storeValue && isIdValue(escapedId)) {\n        const hadTypename = escapedId.typename !== undefined;\n        const hasTypename = typename !== undefined;\n        const typenameChanged =\n          hadTypename && hasTypename && escapedId.typename !== typename;\n\n        // If there is already a real id in the store and the current id we\n        // are dealing with is generated, we throw an error.\n        // One exception we allow is when the typename has changed, which occurs\n        // when schema defines a union, both with and without an ID in the same place.\n        // checks if we \"lost\" the read id\n        invariant(\n          !generated || escapedId.generated || typenameChanged,\n          `Store error: the application attempted to write an object with no provided id but the store already contains an id of ${\n            escapedId.id\n          } for this object. The selectionSet that was trying to be written is:\\n${\n            JSON.stringify(field)\n          }`,\n        );\n\n        // checks if we \"lost\" the typename\n        invariant(\n          !hadTypename || hasTypename,\n          `Store error: the application attempted to write an object with no provided typename but the store already contains an object with typename of ${\n            escapedId.typename\n          } for the object of id ${escapedId.id}. The selectionSet that was trying to be written is:\\n${\n            JSON.stringify(field)\n          }`,\n        );\n\n        if (escapedId.generated) {\n          // We should only merge if it's an object of the same type,\n          // otherwise we should delete the generated object\n          if (typenameChanged) {\n            // Only delete the generated object when the old object was\n            // inlined, and the new object is not. This is indicated by\n            // the old id being generated, and the new id being real.\n            if (!generated) {\n              store.delete(escapedId.id);\n            }\n          } else {\n            mergeWithGenerated(escapedId.id, (storeValue as IdValue).id, store);\n          }\n        }\n      }\n    }\n\n    storeObject = store.get(dataId);\n    if (!storeObject || !isEqual(storeValue, storeObject[storeFieldName])) {\n      store.set(dataId, {\n        ...storeObject,\n        [storeFieldName]: storeValue,\n      });\n    }\n  }\n\n  private processArrayValue(\n    value: any[],\n    generatedId: string,\n    selectionSet: SelectionSetNode,\n    context: WriteContext,\n  ): any[] {\n    return value.map((item: any, index: any) => {\n      if (item === null) {\n        return null;\n      }\n\n      let itemDataId = `${generatedId}.${index}`;\n\n      if (Array.isArray(item)) {\n        return this.processArrayValue(item, itemDataId, selectionSet, context);\n      }\n\n      let generated = true;\n\n      if (context.dataIdFromObject) {\n        const semanticId = context.dataIdFromObject(item);\n\n        if (semanticId) {\n          itemDataId = semanticId;\n          generated = false;\n        }\n      }\n\n      if (!isDataProcessed(itemDataId, selectionSet, context.processedData)) {\n        this.writeSelectionSetToStore({\n          dataId: itemDataId,\n          result: item,\n          selectionSet,\n          context,\n        });\n      }\n\n      return toIdValue(\n        { id: itemDataId, typename: item.__typename },\n        generated,\n      );\n    });\n  }\n}\n\n// Checks if the id given is an id that was generated by Apollo\n// rather than by dataIdFromObject.\nfunction isGeneratedId(id: string): boolean {\n  return id[0] === '$';\n}\n\nfunction mergeWithGenerated(\n  generatedKey: string,\n  realKey: string,\n  cache: NormalizedCache,\n): boolean {\n  if (generatedKey === realKey) {\n    return false;\n  }\n\n  const generated = cache.get(generatedKey);\n  const real = cache.get(realKey);\n  let madeChanges = false;\n\n  Object.keys(generated).forEach(key => {\n    const value = generated[key];\n    const realValue = real[key];\n\n    if (\n      isIdValue(value) &&\n      isGeneratedId(value.id) &&\n      isIdValue(realValue) &&\n      !isEqual(value, realValue) &&\n      mergeWithGenerated(value.id, realValue.id, cache)\n    ) {\n      madeChanges = true;\n    }\n  });\n\n  cache.delete(generatedKey);\n  const newRealValue = { ...generated, ...real };\n\n  if (isEqual(newRealValue, real)) {\n    return madeChanges;\n  }\n\n  cache.set(realKey, newRealValue);\n  return true;\n}\n\nfunction isDataProcessed(\n  dataId: string,\n  field: FieldNode | SelectionSetNode,\n  processedData?: { [x: string]: (FieldNode | SelectionSetNode)[] },\n): boolean {\n  if (!processedData) {\n    return false;\n  }\n\n  if (processedData[dataId]) {\n    if (processedData[dataId].indexOf(field) >= 0) {\n      return true;\n    } else {\n      processedData[dataId].push(field);\n    }\n  } else {\n    processedData[dataId] = [field];\n  }\n\n  return false;\n}\n","// Make builtins like Map and Set safe to use with non-extensible objects.\nimport './fixPolyfills';\n\nimport { DocumentNode } from 'graphql';\n\nimport { Cache, ApolloCache, Transaction } from 'apollo-cache';\n\nimport { addTypenameToDocument, canUseWeakMap } from 'apollo-utilities';\n\nimport { wrap } from 'optimism';\n\nimport { invariant, InvariantError } from 'ts-invariant';\n\nimport { HeuristicFragmentMatcher } from './fragmentMatcher';\nimport {\n  ApolloReducerConfig,\n  NormalizedCache,\n  NormalizedCacheObject,\n} from './types';\n\nimport { StoreReader } from './readFromStore';\nimport { StoreWriter } from './writeToStore';\nimport { DepTrackingCache } from './depTrackingCache';\nimport { KeyTrie } from 'optimism';\nimport { ObjectCache } from './objectCache';\n\nexport interface InMemoryCacheConfig extends ApolloReducerConfig {\n  resultCaching?: boolean;\n  freezeResults?: boolean;\n}\n\nconst defaultConfig: InMemoryCacheConfig = {\n  fragmentMatcher: new HeuristicFragmentMatcher(),\n  dataIdFromObject: defaultDataIdFromObject,\n  addTypename: true,\n  resultCaching: true,\n  freezeResults: false,\n};\n\nexport function defaultDataIdFromObject(result: any): string | null {\n  if (result.__typename) {\n    if (result.id !== undefined) {\n      return `${result.__typename}:${result.id}`;\n    }\n    if (result._id !== undefined) {\n      return `${result.__typename}:${result._id}`;\n    }\n  }\n  return null;\n}\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nexport class OptimisticCacheLayer extends ObjectCache {\n  constructor(\n    public readonly optimisticId: string,\n    // OptimisticCacheLayer objects always wrap some other parent cache, so\n    // this.parent should never be null.\n    public readonly parent: NormalizedCache,\n    public readonly transaction: Transaction<NormalizedCacheObject>,\n  ) {\n    super(Object.create(null));\n  }\n\n  public toObject(): NormalizedCacheObject {\n    return {\n      ...this.parent.toObject(),\n      ...this.data,\n    };\n  }\n\n  // All the other accessor methods of ObjectCache work without knowing about\n  // this.parent, but the get method needs to be overridden to implement the\n  // fallback this.parent.get(dataId) behavior.\n  public get(dataId: string) {\n    return hasOwn.call(this.data, dataId)\n      ? this.data[dataId]\n      : this.parent.get(dataId);\n  }\n}\n\nexport class InMemoryCache extends ApolloCache<NormalizedCacheObject> {\n  private data: NormalizedCache;\n  private optimisticData: NormalizedCache;\n\n  protected config: InMemoryCacheConfig;\n  private watches = new Set<Cache.WatchOptions>();\n  private addTypename: boolean;\n  private typenameDocumentCache = new Map<DocumentNode, DocumentNode>();\n  private storeReader: StoreReader;\n  private storeWriter: StoreWriter;\n  private cacheKeyRoot = new KeyTrie<object>(canUseWeakMap);\n\n  // Set this while in a transaction to prevent broadcasts...\n  // don't forget to turn it back on!\n  private silenceBroadcast: boolean = false;\n\n  constructor(config: InMemoryCacheConfig = {}) {\n    super();\n    this.config = { ...defaultConfig, ...config };\n\n    // backwards compat\n    if ((this.config as any).customResolvers) {\n      invariant.warn(\n        'customResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating customResolvers in the next major version.',\n      );\n      this.config.cacheRedirects = (this.config as any).customResolvers;\n    }\n\n    if ((this.config as any).cacheResolvers) {\n      invariant.warn(\n        'cacheResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating cacheResolvers in the next major version.',\n      );\n      this.config.cacheRedirects = (this.config as any).cacheResolvers;\n    }\n\n    this.addTypename = !!this.config.addTypename;\n\n    // Passing { resultCaching: false } in the InMemoryCache constructor options\n    // will completely disable dependency tracking, which will improve memory\n    // usage but worsen the performance of repeated reads.\n    this.data = this.config.resultCaching\n      ? new DepTrackingCache()\n      : new ObjectCache();\n\n    // When no optimistic writes are currently active, cache.optimisticData ===\n    // cache.data, so there are no additional layers on top of the actual data.\n    // When an optimistic update happens, this.optimisticData will become a\n    // linked list of OptimisticCacheLayer objects that terminates with the\n    // original this.data cache object.\n    this.optimisticData = this.data;\n\n    this.storeWriter = new StoreWriter();\n    this.storeReader = new StoreReader({\n      cacheKeyRoot: this.cacheKeyRoot,\n      freezeResults: config.freezeResults,\n    });\n\n    const cache = this;\n    const { maybeBroadcastWatch } = cache;\n    this.maybeBroadcastWatch = wrap((c: Cache.WatchOptions) => {\n      return maybeBroadcastWatch.call(this, c);\n    }, {\n      makeCacheKey(c: Cache.WatchOptions) {\n        if (c.optimistic) {\n          // If we're reading optimistic data, it doesn't matter if this.data\n          // is a DepTrackingCache, since it will be ignored.\n          return;\n        }\n\n        if (c.previousResult) {\n          // If a previousResult was provided, assume the caller would prefer\n          // to compare the previous data to the new data to determine whether\n          // to broadcast, so we should disable caching by returning here, to\n          // give maybeBroadcastWatch a chance to do that comparison.\n          return;\n        }\n\n        if (cache.data instanceof DepTrackingCache) {\n          // Return a cache key (thus enabling caching) only if we're currently\n          // using a data store that can track cache dependencies.\n          return cache.cacheKeyRoot.lookup(\n            c.query,\n            JSON.stringify(c.variables),\n          );\n        }\n      }\n    });\n  }\n\n  public restore(data: NormalizedCacheObject): this {\n    if (data) this.data.replace(data);\n    return this;\n  }\n\n  public extract(optimistic: boolean = false): NormalizedCacheObject {\n    return (optimistic ? this.optimisticData : this.data).toObject();\n  }\n\n  public read<T>(options: Cache.ReadOptions): T | null {\n    if (typeof options.rootId === 'string' &&\n        typeof this.data.get(options.rootId) === 'undefined') {\n      return null;\n    }\n\n    const { fragmentMatcher } = this.config;\n    const fragmentMatcherFunction = fragmentMatcher && fragmentMatcher.match;\n\n    return this.storeReader.readQueryFromStore({\n      store: options.optimistic ? this.optimisticData : this.data,\n      query: this.transformDocument(options.query),\n      variables: options.variables,\n      rootId: options.rootId,\n      fragmentMatcherFunction,\n      previousResult: options.previousResult,\n      config: this.config,\n    }) || null;\n  }\n\n  public write(write: Cache.WriteOptions): void {\n    const { fragmentMatcher } = this.config;\n    const fragmentMatcherFunction = fragmentMatcher && fragmentMatcher.match;\n\n    this.storeWriter.writeResultToStore({\n      dataId: write.dataId,\n      result: write.result,\n      variables: write.variables,\n      document: this.transformDocument(write.query),\n      store: this.data,\n      dataIdFromObject: this.config.dataIdFromObject,\n      fragmentMatcherFunction,\n    });\n\n    this.broadcastWatches();\n  }\n\n  public diff<T>(query: Cache.DiffOptions): Cache.DiffResult<T> {\n    const { fragmentMatcher } = this.config;\n    const fragmentMatcherFunction = fragmentMatcher && fragmentMatcher.match;\n\n    return this.storeReader.diffQueryAgainstStore({\n      store: query.optimistic ? this.optimisticData : this.data,\n      query: this.transformDocument(query.query),\n      variables: query.variables,\n      returnPartialData: query.returnPartialData,\n      previousResult: query.previousResult,\n      fragmentMatcherFunction,\n      config: this.config,\n    });\n  }\n\n  public watch(watch: Cache.WatchOptions): () => void {\n    this.watches.add(watch);\n\n    return () => {\n      this.watches.delete(watch);\n    };\n  }\n\n  public evict(query: Cache.EvictOptions): Cache.EvictionResult {\n    throw new InvariantError(`eviction is not implemented on InMemory Cache`);\n  }\n\n  public reset(): Promise<void> {\n    this.data.clear();\n    this.broadcastWatches();\n\n    return Promise.resolve();\n  }\n\n  public removeOptimistic(idToRemove: string) {\n    const toReapply: OptimisticCacheLayer[] = [];\n    let removedCount = 0;\n    let layer = this.optimisticData;\n\n    while (layer instanceof OptimisticCacheLayer) {\n      if (layer.optimisticId === idToRemove) {\n        ++removedCount;\n      } else {\n        toReapply.push(layer);\n      }\n      layer = layer.parent;\n    }\n\n    if (removedCount > 0) {\n      // Reset this.optimisticData to the first non-OptimisticCacheLayer object,\n      // which is almost certainly this.data.\n      this.optimisticData = layer;\n\n      // Reapply the layers whose optimistic IDs do not match the removed ID.\n      while (toReapply.length > 0) {\n        const layer = toReapply.pop()!;\n        this.performTransaction(layer.transaction, layer.optimisticId);\n      }\n\n      this.broadcastWatches();\n    }\n  }\n\n  public performTransaction(\n    transaction: Transaction<NormalizedCacheObject>,\n    // This parameter is not part of the performTransaction signature inherited\n    // from the ApolloCache abstract class, but it's useful because it saves us\n    // from duplicating this implementation in recordOptimisticTransaction.\n    optimisticId?: string,\n  ) {\n    const { data, silenceBroadcast } = this;\n    this.silenceBroadcast = true;\n\n    if (typeof optimisticId === 'string') {\n      // Add a new optimistic layer and temporarily make this.data refer to\n      // that layer for the duration of the transaction.\n      this.data = this.optimisticData = new OptimisticCacheLayer(\n        // Note that there can be multiple layers with the same optimisticId.\n        // When removeOptimistic(id) is called for that id, all matching layers\n        // will be removed, and the remaining layers will be reapplied.\n        optimisticId,\n        this.optimisticData,\n        transaction,\n      );\n    }\n\n    try {\n      transaction(this);\n    } finally {\n      this.silenceBroadcast = silenceBroadcast;\n      this.data = data;\n    }\n\n    // This broadcast does nothing if this.silenceBroadcast is true.\n    this.broadcastWatches();\n  }\n\n  public recordOptimisticTransaction(\n    transaction: Transaction<NormalizedCacheObject>,\n    id: string,\n  ) {\n    return this.performTransaction(transaction, id);\n  }\n\n  public transformDocument(document: DocumentNode): DocumentNode {\n    if (this.addTypename) {\n      let result = this.typenameDocumentCache.get(document);\n      if (!result) {\n        result = addTypenameToDocument(document);\n        this.typenameDocumentCache.set(document, result);\n        // If someone calls transformDocument and then mistakenly passes the\n        // result back into an API that also calls transformDocument, make sure\n        // we don't keep creating new query documents.\n        this.typenameDocumentCache.set(result, result);\n      }\n      return result;\n    }\n    return document;\n  }\n\n  protected broadcastWatches() {\n    if (!this.silenceBroadcast) {\n      this.watches.forEach(c => this.maybeBroadcastWatch(c));\n    }\n  }\n\n  // This method is wrapped in the constructor so that it will be called only\n  // if the data that would be broadcast has changed.\n  private maybeBroadcastWatch(c: Cache.WatchOptions) {\n    c.callback(\n      this.diff({\n        query: c.query,\n        variables: c.variables,\n        previousResult: c.previousResult && c.previousResult(),\n        optimistic: c.optimistic,\n      }),\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}