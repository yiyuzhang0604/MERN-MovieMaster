{"ast":null,"code":"import { __rest, __assign, __extends } from 'tslib';\nimport { ApolloLink, fromError, Observable } from 'apollo-link';\nimport { checkFetcher, selectURI, selectHttpOptionsAndBody, fallbackHttpConfig, createSignalIfSupported, serializeFetchParameter, parseAndCheckHttpResponse } from 'apollo-link-http-common';\n\nvar createHttpLink = function (linkOptions) {\n  if (linkOptions === void 0) {\n    linkOptions = {};\n  }\n\n  var _a = linkOptions.uri,\n      uri = _a === void 0 ? '/graphql' : _a,\n      fetcher = linkOptions.fetch,\n      includeExtensions = linkOptions.includeExtensions,\n      useGETForQueries = linkOptions.useGETForQueries,\n      requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\", \"useGETForQueries\"]);\n\n  checkFetcher(fetcher);\n\n  if (!fetcher) {\n    fetcher = fetch;\n  }\n\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions\n    },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers\n  };\n  return new ApolloLink(function (operation) {\n    var chosenURI = selectURI(operation, uri);\n    var context = operation.getContext();\n    var clientAwarenessHeaders = {};\n\n    if (context.clientAwareness) {\n      var _a = context.clientAwareness,\n          name_1 = _a.name,\n          version = _a.version;\n\n      if (name_1) {\n        clientAwarenessHeaders['apollographql-client-name'] = name_1;\n      }\n\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    var contextHeaders = __assign({}, clientAwarenessHeaders, context.headers);\n\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders\n    };\n\n    var _b = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig),\n        options = _b.options,\n        body = _b.body;\n\n    var controller;\n\n    if (!options.signal) {\n      var _c = createSignalIfSupported(),\n          _controller = _c.controller,\n          signal = _c.signal;\n\n      controller = _controller;\n      if (controller) options.signal = signal;\n    }\n\n    var definitionIsMutation = function (d) {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n\n    if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n      options.method = 'GET';\n    }\n\n    if (options.method === 'GET') {\n      var _d = rewriteURIForGET(chosenURI, body),\n          newURI = _d.newURI,\n          parseError = _d.parseError;\n\n      if (parseError) {\n        return fromError(parseError);\n      }\n\n      chosenURI = newURI;\n    } else {\n      try {\n        options.body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(function (observer) {\n      fetcher(chosenURI, options).then(function (response) {\n        operation.setContext({\n          response: response\n        });\n        return response;\n      }).then(parseAndCheckHttpResponse(operation)).then(function (result) {\n        observer.next(result);\n        observer.complete();\n        return result;\n      }).catch(function (err) {\n        if (err.name === 'AbortError') return;\n\n        if (err.result && err.result.errors && err.result.data) {\n          observer.next(err.result);\n        }\n\n        observer.error(err);\n      });\n      return function () {\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n\nfunction rewriteURIForGET(chosenURI, body) {\n  var queryParams = [];\n\n  var addQueryParam = function (key, value) {\n    queryParams.push(key + \"=\" + encodeURIComponent(value));\n  };\n\n  if ('query' in body) {\n    addQueryParam('query', body.query);\n  }\n\n  if (body.operationName) {\n    addQueryParam('operationName', body.operationName);\n  }\n\n  if (body.variables) {\n    var serializedVariables = void 0;\n\n    try {\n      serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n\n    addQueryParam('variables', serializedVariables);\n  }\n\n  if (body.extensions) {\n    var serializedExtensions = void 0;\n\n    try {\n      serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n\n    addQueryParam('extensions', serializedExtensions);\n  }\n\n  var fragment = '',\n      preFragment = chosenURI;\n  var fragmentStart = chosenURI.indexOf('#');\n\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n\n  var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n  var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n  return {\n    newURI: newURI\n  };\n}\n\nvar HttpLink = function (_super) {\n  __extends(HttpLink, _super);\n\n  function HttpLink(opts) {\n    return _super.call(this, createHttpLink(opts).request) || this;\n  }\n\n  return HttpLink;\n}(ApolloLink);\n\nexport { HttpLink, createHttpLink };","map":{"version":3,"mappings":";;;;IAkCaA,cAAc,GAAG,UAACC,WAAD,EAAmC;AAAlC;AAAAA;AAAkC;;AAE7D;AAAA;AAAA,MAEAC,2BAFA;AAAA,MAGAC,iDAHA;AAAA,MAIAC,+CAJA;AAAA,MAKAC,+FALA;;AASFC,cAAY,CAACJ,OAAD,CAAZ;;AAKA,MAAI,CAACA,OAAL,EAAc;AACZA,WAAO,GAAGK,KAAV;AACD;;AAED,MAAMC,UAAU,GAAG;AACjBC,QAAI,EAAE;AAAEN,uBAAiB;AAAnB,KADW;AAEjBO,WAAO,EAAEL,cAAc,CAACM,YAFP;AAGjBC,eAAW,EAAEP,cAAc,CAACO,WAHX;AAIjBC,WAAO,EAAER,cAAc,CAACQ;AAJP,GAAnB;AAOA,SAAO,IAAIC,UAAJ,CAAe,qBAAS;AAC7B,QAAIC,SAAS,GAAGC,SAAS,CAACC,SAAD,EAAYC,GAAZ,CAAzB;AAEA,QAAMC,OAAO,GAAGF,SAAS,CAACG,UAAV,EAAhB;AAQA,QAAMC,sBAAsB,GAAG,EAA/B;;AACA,QAAIF,OAAO,CAACG,eAAZ,EAA6B;AACrB;AAAA,UAAEC,gBAAF;AAAA,UAAQC,oBAAR;;AACN,UAAID,MAAJ,EAAU;AACRF,8BAAsB,CAAC,2BAAD,CAAtB,GAAsDE,MAAtD;AACD;;AACD,UAAIC,OAAJ,EAAa;AACXH,8BAAsB,CAAC,8BAAD,CAAtB,GAAyDG,OAAzD;AACD;AACF;;AAED,QAAMC,cAAc,gBAAQJ,sBAAR,EAAmCF,OAAO,CAACN,OAA3C,CAApB;;AAEA,QAAMa,aAAa,GAAG;AACpBjB,UAAI,EAAEU,OAAO,CAACV,IADM;AAEpBC,aAAO,EAAES,OAAO,CAACR,YAFG;AAGpBC,iBAAW,EAAEO,OAAO,CAACP,WAHD;AAIpBC,aAAO,EAAEY;AAJW,KAAtB;;AAQM;AAAA,QAAEf,oBAAF;AAAA,QAAWiB,cAAX;;AAON,QAAIC,UAAJ;;AACA,QAAI,CAAElB,OAAe,CAACmB,MAAtB,EAA8B;AACtB;AAAA,UAAEC,2BAAF;AAAA,UAA2BD,kBAA3B;;AACND,gBAAU,GAAGE,WAAb;AACA,UAAIF,UAAJ,EAAiBlB,OAAe,CAACmB,MAAhB,GAAyBA,MAAzB;AAClB;;AAGD,QAAME,oBAAoB,GAAG,UAACC,CAAD,EAAkB;AAC7C,aAAOA,CAAC,CAACC,IAAF,KAAW,qBAAX,IAAoCD,CAAC,CAACf,SAAF,KAAgB,UAA3D;AACD,KAFD;;AAGA,QACEb,gBAAgB,IAChB,CAACa,SAAS,CAACiB,KAAV,CAAgBC,WAAhB,CAA4BC,IAA5B,CAAiCL,oBAAjC,CAFH,EAGE;AACArB,aAAO,CAAC2B,MAAR,GAAiB,KAAjB;AACD;;AAED,QAAI3B,OAAO,CAAC2B,MAAR,KAAmB,KAAvB,EAA8B;AACtB;AAAA,UAAEC,kBAAF;AAAA,UAAUC,0BAAV;;AACN,UAAIA,UAAJ,EAAgB;AACd,eAAOC,SAAS,CAACD,UAAD,CAAhB;AACD;;AACDxB,eAAS,GAAGuB,MAAZ;AACD,KAND,MAMO;AACL,UAAI;AACD5B,eAAe,CAACiB,IAAhB,GAAuBc,uBAAuB,CAACd,IAAD,EAAO,SAAP,CAA9C;AACF,OAFD,CAEE,OAAOY,UAAP,EAAmB;AACnB,eAAOC,SAAS,CAACD,UAAD,CAAhB;AACD;AACF;;AAED,WAAO,IAAIG,UAAJ,CAAe,oBAAQ;AAC5BxC,aAAO,CAACa,SAAD,EAAYL,OAAZ,CAAP,CACGiC,IADH,CACQ,oBAAQ;AACZ1B,iBAAS,CAAC2B,UAAV,CAAqB;AAAEC,kBAAQ;AAAV,SAArB;AACA,eAAOA,QAAP;AACD,OAJH,EAKGF,IALH,CAKQG,yBAAyB,CAAC7B,SAAD,CALjC,EAMG0B,IANH,CAMQ,kBAAM;AAEVI,gBAAQ,CAACC,IAAT,CAAcC,MAAd;AACAF,gBAAQ,CAACG,QAAT;AACA,eAAOD,MAAP;AACD,OAXH,EAYGE,KAZH,CAYS,eAAG;AAER,YAAIC,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA+B;;AAO/B,YAAID,GAAG,CAACH,MAAJ,IAAcG,GAAG,CAACH,MAAJ,CAAWK,MAAzB,IAAmCF,GAAG,CAACH,MAAJ,CAAWM,IAAlD,EAAwD;AA2BtDR,kBAAQ,CAACC,IAAT,CAAcI,GAAG,CAACH,MAAlB;AACD;;AACDF,gBAAQ,CAACS,KAAT,CAAeJ,GAAf;AACD,OAnDH;AAqDA,aAAO;AAGL,YAAIxB,UAAJ,EAAgBA,UAAU,CAAC6B,KAAX;AACjB,OAJD;AAKD,KA3DM,CAAP;AA4DD,GAnIM,CAAP;AAoIF;;AAIA,SAASC,gBAAT,CAA0B3C,SAA1B,EAA6CY,IAA7C,EAAuD;AAGrD,MAAMgC,WAAW,GAAG,EAApB;;AACA,MAAMC,aAAa,GAAG,UAACC,GAAD,EAAcC,KAAd,EAA2B;AAC/CH,eAAW,CAACI,IAAZ,CAAoBF,GAAG,MAAH,GAAOG,kBAAkB,CAACF,KAAD,CAA7C;AACD,GAFD;;AAIA,MAAI,WAAWnC,IAAf,EAAqB;AACnBiC,iBAAa,CAAC,OAAD,EAAUjC,IAAI,CAACO,KAAf,CAAb;AACD;;AACD,MAAIP,IAAI,CAACsC,aAAT,EAAwB;AACtBL,iBAAa,CAAC,eAAD,EAAkBjC,IAAI,CAACsC,aAAvB,CAAb;AACD;;AACD,MAAItC,IAAI,CAACuC,SAAT,EAAoB;AAClB,QAAIC,mBAAmB,SAAvB;;AACA,QAAI;AACFA,yBAAmB,GAAG1B,uBAAuB,CAC3Cd,IAAI,CAACuC,SADsC,EAE3C,eAF2C,CAA7C;AAID,KALD,CAKE,OAAO3B,UAAP,EAAmB;AACnB,aAAO;AAAEA,kBAAU;AAAZ,OAAP;AACD;;AACDqB,iBAAa,CAAC,WAAD,EAAcO,mBAAd,CAAb;AACD;;AACD,MAAIxC,IAAI,CAACyC,UAAT,EAAqB;AACnB,QAAIC,oBAAoB,SAAxB;;AACA,QAAI;AACFA,0BAAoB,GAAG5B,uBAAuB,CAC5Cd,IAAI,CAACyC,UADuC,EAE5C,gBAF4C,CAA9C;AAID,KALD,CAKE,OAAO7B,UAAP,EAAmB;AACnB,aAAO;AAAEA,kBAAU;AAAZ,OAAP;AACD;;AACDqB,iBAAa,CAAC,YAAD,EAAeS,oBAAf,CAAb;AACD;;AAQD,MAAIC,QAAQ,GAAG,EAAf;AAAA,MACEC,WAAW,GAAGxD,SADhB;AAEA,MAAMyD,aAAa,GAAGzD,SAAS,CAAC0D,OAAV,CAAkB,GAAlB,CAAtB;;AACA,MAAID,aAAa,KAAK,CAAC,CAAvB,EAA0B;AACxBF,YAAQ,GAAGvD,SAAS,CAAC2D,MAAV,CAAiBF,aAAjB,CAAX;AACAD,eAAW,GAAGxD,SAAS,CAAC2D,MAAV,CAAiB,CAAjB,EAAoBF,aAApB,CAAd;AACD;;AACD,MAAMG,iBAAiB,GAAGJ,WAAW,CAACE,OAAZ,CAAoB,GAApB,MAA6B,CAAC,CAA9B,GAAkC,GAAlC,GAAwC,GAAlE;AACA,MAAMnC,MAAM,GACViC,WAAW,GAAGI,iBAAd,GAAkChB,WAAW,CAACiB,IAAZ,CAAiB,GAAjB,CAAlC,GAA0DN,QAD5D;AAEA,SAAO;AAAEhC,UAAM;AAAR,GAAP;AACD;;;AAE6BuC;;AAE5B,oBAAYC,IAAZ,EAAmC;WACjCC,kBAAM/E,cAAc,CAAC8E,IAAD,CAAd,CAAqBE,OAA3B,KAAmC;AACpC;;AACH;AALA,EAA8BlE","names":["createHttpLink","linkOptions","fetcher","includeExtensions","useGETForQueries","requestOptions","checkFetcher","fetch","linkConfig","http","options","fetchOptions","credentials","headers","ApolloLink","chosenURI","selectURI","operation","uri","context","getContext","clientAwarenessHeaders","clientAwareness","name_1","version","contextHeaders","contextConfig","body","controller","signal","_controller","definitionIsMutation","d","kind","query","definitions","some","method","newURI","parseError","fromError","serializeFetchParameter","Observable","then","setContext","response","parseAndCheckHttpResponse","observer","next","result","complete","catch","err","name","errors","data","error","abort","rewriteURIForGET","queryParams","addQueryParam","key","value","push","encodeURIComponent","operationName","variables","serializedVariables","extensions","serializedExtensions","fragment","preFragment","fragmentStart","indexOf","substr","queryParamsPrefix","join","tslib_1.__extends","opts","_super","request"],"sources":["../src/httpLink.ts"],"sourcesContent":["/* tslint:disable */\n\nimport { ApolloLink, Observable, RequestHandler, fromError } from 'apollo-link';\nimport {\n  serializeFetchParameter,\n  selectURI,\n  parseAndCheckHttpResponse,\n  checkFetcher,\n  selectHttpOptionsAndBody,\n  createSignalIfSupported,\n  fallbackHttpConfig,\n  Body,\n  HttpOptions,\n  UriFunction as _UriFunction,\n} from 'apollo-link-http-common';\nimport { DefinitionNode } from 'graphql';\n\nexport namespace HttpLink {\n  //TODO Would much rather be able to export directly\n  export interface UriFunction extends _UriFunction {}\n  export interface Options extends HttpOptions {\n    /**\n     * If set to true, use the HTTP GET method for query operations. Mutations\n     * will still use the method specified in fetchOptions.method (which defaults\n     * to POST).\n     */\n    useGETForQueries?: boolean;\n  }\n}\n\n// For backwards compatibility.\nexport import FetchOptions = HttpLink.Options;\nexport import UriFunction = HttpLink.UriFunction;\n\nexport const createHttpLink = (linkOptions: HttpLink.Options = {}) => {\n  let {\n    uri = '/graphql',\n    // use default global fetch if nothing passed in\n    fetch: fetcher,\n    includeExtensions,\n    useGETForQueries,\n    ...requestOptions\n  } = linkOptions;\n\n  // dev warnings to ensure fetch is present\n  checkFetcher(fetcher);\n\n  //fetcher is set here rather than the destructuring to ensure fetch is\n  //declared before referencing it. Reference in the destructuring would cause\n  //a ReferenceError\n  if (!fetcher) {\n    fetcher = fetch;\n  }\n\n  const linkConfig = {\n    http: { includeExtensions },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers,\n  };\n\n  return new ApolloLink(operation => {\n    let chosenURI = selectURI(operation, uri);\n\n    const context = operation.getContext();\n\n    // `apollographql-client-*` headers are automatically set if a\n    // `clientAwareness` object is found in the context. These headers are\n    // set first, followed by the rest of the headers pulled from\n    // `context.headers`. If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n    const clientAwarenessHeaders = {};\n    if (context.clientAwareness) {\n      const { name, version } = context.clientAwareness;\n      if (name) {\n        clientAwarenessHeaders['apollographql-client-name'] = name;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    const contextHeaders = { ...clientAwarenessHeaders, ...context.headers };\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders,\n    };\n\n    //uses fallback, link, and then context to build options\n    const { options, body } = selectHttpOptionsAndBody(\n      operation,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig,\n    );\n\n    let controller;\n    if (!(options as any).signal) {\n      const { controller: _controller, signal } = createSignalIfSupported();\n      controller = _controller;\n      if (controller) (options as any).signal = signal;\n    }\n\n    // If requested, set method to GET if there are no mutations.\n    const definitionIsMutation = (d: DefinitionNode) => {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    if (\n      useGETForQueries &&\n      !operation.query.definitions.some(definitionIsMutation)\n    ) {\n      options.method = 'GET';\n    }\n\n    if (options.method === 'GET') {\n      const { newURI, parseError } = rewriteURIForGET(chosenURI, body);\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        (options as any).body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(observer => {\n      fetcher(chosenURI, options)\n        .then(response => {\n          operation.setContext({ response });\n          return response;\n        })\n        .then(parseAndCheckHttpResponse(operation))\n        .then(result => {\n          // we have data and can send it to back up the link chain\n          observer.next(result);\n          observer.complete();\n          return result;\n        })\n        .catch(err => {\n          // fetch was cancelled so it's already been cleaned up in the unsubscribe\n          if (err.name === 'AbortError') return;\n          // if it is a network error, BUT there is graphql result info\n          // fire the next observer before calling error\n          // this gives apollo-client (and react-apollo) the `graphqlErrors` and `networErrors`\n          // to pass to UI\n          // this should only happen if we *also* have data as part of the response key per\n          // the spec\n          if (err.result && err.result.errors && err.result.data) {\n            // if we don't call next, the UI can only show networkError because AC didn't\n            // get any graphqlErrors\n            // this is graphql execution result info (i.e errors and possibly data)\n            // this is because there is no formal spec how errors should translate to\n            // http status codes. So an auth error (401) could have both data\n            // from a public field, errors from a private field, and a status of 401\n            // {\n            //  user { // this will have errors\n            //    firstName\n            //  }\n            //  products { // this is public so will have data\n            //    cost\n            //  }\n            // }\n            //\n            // the result of above *could* look like this:\n            // {\n            //   data: { products: [{ cost: \"$10\" }] },\n            //   errors: [{\n            //      message: 'your session has timed out',\n            //      path: []\n            //   }]\n            // }\n            // status code of above would be a 401\n            // in the UI you want to show data where you can, errors as data where you can\n            // and use correct http status codes\n            observer.next(err.result);\n          }\n          observer.error(err);\n        });\n\n      return () => {\n        // XXX support canceling this request\n        // https://developers.google.com/web/updates/2017/09/abortable-fetch\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n\n// For GET operations, returns the given URI rewritten with parameters, or a\n// parse error.\nfunction rewriteURIForGET(chosenURI: string, body: Body) {\n  // Implement the standard HTTP GET serialization, plus 'extensions'. Note\n  // the extra level of JSON serialization!\n  const queryParams = [];\n  const addQueryParam = (key: string, value: string) => {\n    queryParams.push(`${key}=${encodeURIComponent(value)}`);\n  };\n\n  if ('query' in body) {\n    addQueryParam('query', body.query);\n  }\n  if (body.operationName) {\n    addQueryParam('operationName', body.operationName);\n  }\n  if (body.variables) {\n    let serializedVariables;\n    try {\n      serializedVariables = serializeFetchParameter(\n        body.variables,\n        'Variables map',\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam('variables', serializedVariables);\n  }\n  if (body.extensions) {\n    let serializedExtensions;\n    try {\n      serializedExtensions = serializeFetchParameter(\n        body.extensions,\n        'Extensions map',\n      );\n    } catch (parseError) {\n      return { parseError };\n    }\n    addQueryParam('extensions', serializedExtensions);\n  }\n\n  // Reconstruct the URI with added query params.\n  // XXX This assumes that the URI is well-formed and that it doesn't\n  //     already contain any of these query params. We could instead use the\n  //     URL API and take a polyfill (whatwg-url@6) for older browsers that\n  //     don't support URLSearchParams. Note that some browsers (and\n  //     versions of whatwg-url) support URL but not URLSearchParams!\n  let fragment = '',\n    preFragment = chosenURI;\n  const fragmentStart = chosenURI.indexOf('#');\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n  const queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n  const newURI =\n    preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n  return { newURI };\n}\n\nexport class HttpLink extends ApolloLink {\n  public requester: RequestHandler;\n  constructor(opts?: HttpLink.Options) {\n    super(createHttpLink(opts).request);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}