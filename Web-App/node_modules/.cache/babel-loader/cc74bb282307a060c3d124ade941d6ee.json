{"ast":null,"code":"import { __rest } from 'tslib';\nimport { ApolloLink, Observable } from 'apollo-link';\n\nfunction setContext(setter) {\n  return new ApolloLink(function (operation, forward) {\n    var request = __rest(operation, []);\n\n    return new Observable(function (observer) {\n      var handle;\n      Promise.resolve(request).then(function (req) {\n        return setter(req, operation.getContext());\n      }).then(operation.setContext).then(function () {\n        handle = forward(operation).subscribe({\n          next: observer.next.bind(observer),\n          error: observer.error.bind(observer),\n          complete: observer.complete.bind(observer)\n        });\n      }).catch(observer.error.bind(observer));\n      return function () {\n        if (handle) handle.unsubscribe();\n      };\n    });\n  });\n}\n\nexport { setContext };","map":{"version":3,"mappings":";;;SAagBA,WAAWC,QAAqB;AAC9C,SAAO,IAAIC,UAAJ,CAAe,UAACC,SAAD,EAAuBC,OAAvB,EAAwC;AAC5D,QAAQC,+BAAR;;AAEA,WAAO,IAAIC,UAAJ,CAAe,oBAAQ;AAC5B,UAAIC,MAAJ;AACAC,aAAO,CAACC,OAAR,CAAgBJ,OAAhB,EACGK,IADH,CACQ,eAAG;AAAI,qBAAM,CAACC,GAAD,EAAMR,SAAS,CAACS,UAAV,EAAN,CAAN;AAAmC,OADlD,EAEGF,IAFH,CAEQP,SAAS,CAACH,UAFlB,EAGGU,IAHH,CAGQ;AACJH,cAAM,GAAGH,OAAO,CAACD,SAAD,CAAP,CAAmBU,SAAnB,CAA6B;AACpCC,cAAI,EAAEC,QAAQ,CAACD,IAAT,CAAcE,IAAd,CAAmBD,QAAnB,CAD8B;AAEpCE,eAAK,EAAEF,QAAQ,CAACE,KAAT,CAAeD,IAAf,CAAoBD,QAApB,CAF6B;AAGpCG,kBAAQ,EAAEH,QAAQ,CAACG,QAAT,CAAkBF,IAAlB,CAAuBD,QAAvB;AAH0B,SAA7B,CAAT;AAKD,OATH,EAUGI,KAVH,CAUSJ,QAAQ,CAACE,KAAT,CAAeD,IAAf,CAAoBD,QAApB,CAVT;AAYA,aAAO;AACL,YAAIR,MAAJ,EAAYA,MAAM,CAACa,WAAP;AACb,OAFD;AAGD,KAjBM,CAAP;AAkBD,GArBM,CAAP;AAsBF","names":["setContext","setter","ApolloLink","operation","forward","request","Observable","handle","Promise","resolve","then","req","getContext","subscribe","next","observer","bind","error","complete","catch","unsubscribe"],"sources":["../src/index.ts"],"sourcesContent":["import {\n  ApolloLink,\n  Observable,\n  Operation,\n  NextLink,\n  GraphQLRequest,\n} from 'apollo-link';\n\nexport type ContextSetter = (\n  operation: GraphQLRequest,\n  prevContext: any,\n) => Promise<any> | any;\n\nexport function setContext(setter: ContextSetter): ApolloLink {\n  return new ApolloLink((operation: Operation, forward: NextLink) => {\n    const { ...request } = operation;\n\n    return new Observable(observer => {\n      let handle;\n      Promise.resolve(request)\n        .then(req => setter(req, operation.getContext()))\n        .then(operation.setContext)\n        .then(() => {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer),\n          });\n        })\n        .catch(observer.error.bind(observer));\n\n      return () => {\n        if (handle) handle.unsubscribe();\n      };\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}